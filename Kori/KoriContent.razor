@using Microsoft.JSInterop
<section id="@_id" class="kori-content">
    @ChildContent
</section>

<Kori.KoriLogin />
<Kori.KoriWidget />
@if(markdownValue != null) <MarkdownEditorComponent markdownValue="@markdownValue" />


@* <textarea id="kori-markdown" class="kori__markdown-editor" style="display: none;"></textarea> *@

@inject Kori Kori
@inject NavigationManager Nav
@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    string _id = $"kori-{Guid.NewGuid()}";

    string markdownValue = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Kori.InitializeAsync(this, Nav.Uri, _id);
            Nav.LocationChanged += async (sender, args) => await Kori.InitializeAsync(this, args.Location, _id);
            // StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task<List<string>> TranslateAsync(List<string> content)
    {
        return await Kori.TranslateAsync(content);
    }

    [JSInvokable]
    public async Task<KoriTextContent> SaveAsync(string key, string text)
    {
        var result = await Kori.SaveAsync(key, text);
        StateHasChanged();
        return result;
    }

    // [JSInvokable]
    // public async Task<KoriTextContent> EditMarkdownAsync(string key, string text)
    // {
    //     var result = await Kori.EditMarkdownAsync(key, text);
    //     StateHasChanged();
    //     return result

    [JSInvokable]
    public string GenerateMarkdown(string markdown)
    {
        markdownValue = markdown;
        return markdownValue;
    }
}