@using System.Net.Http.Json
@using System.Globalization

<div class="login-component__language">
    <ul class="language-list @(ShowLanguages? "show" : "")">
        @if (Languages != null)
        {
            @foreach (var language in Languages)
            {
                <li>
                    <button class="login-text__btn" @onclick=@(() => ChangeLanguage(language))>
                        @language.DisplayName

                        @if (language.DisplayName != language.NativeName)
                        {
                            <aside>@language.NativeName</aside>
                        }

                        @* @if (User.Language == language.Id)
                {
                <div class="right">
                <img src="icons/Check.svg" />
                </div>
                }
                *@
                    </button>
                </li>
            }
        }
    </ul>
</div> 

@code {
    [Parameter] public EventCallback<Language> LanguageChanged { get; set; }
    [Parameter] public bool ShowLanguages { get; set; }
    string? SelectedLanguageId { get; set; }
    Language? selectedLanguage;
    List<Language>? Languages { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        SelectedLanguageId = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
        Languages = await GetLanguagesAsync();
        Languages = Languages.OrderBy(x => x.DisplayName).ToList();
        selectedLanguage = Languages.First(x => x.Id == SelectedLanguageId);
    }

    async Task<List<Language>> GetLanguagesAsync()
    {
        var client = new HttpClient { BaseAddress = new Uri("https://ibis-web-kori.azurewebsites.net/") };
        return await client.GetFromJsonAsync<List<Language>>("publicapi/Languages")
               ?? new List<Language>();
    }

    async Task ChangeLanguage(Language language)
    {
        selectedLanguage = language;
        SelectedLanguageId = language.Id;
        if (LanguageChanged.HasDelegate)
            await LanguageChanged.InvokeAsync(language);
    }
}