@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using System.Net.Http.Json
@using Sparc.Blossom.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<style class="kori-ignore">
    @@import url('https://fonts.googleapis.com/css2?family=Encode+Sans+Semi+Expanded:wght@100;200;300;400;500;600;700;800;900&display=swap');
</style>

<div class="login-component kori-ignore">
    <AuthorizeView>
        <Authorized>
            <button class="login-component__toggle @(context.User.IsAnonymous() ? "loggedout" : "loggedin")" aria-label="user" _="on click toggle .show on .login-component__menu">
                <UserIcon LoggedIn="!context.User.IsAnonymous()" />
            </button>

            <div class="login-component__menu">
                @switch (Auth.LoginState)
                {
                    case LoginStates.LoggedOut:
                        <div class="login-menu__user">
                            <figcaption>Anonymous user</figcaption>
                            <aside>@if(Language != null) @Language.DisplayName</aside>
                        </div>
                        <div class="login-menu__actions">
                            <button class="login-btn" @onclick=BeginLogin>
                                Login
                            </button>
                            <button class="language-btn" _="on click toggle .show on .login-component__language">Language Settings</button>
                            <LanguageSelector />
                        </div>
                        break;
                    case LoginStates.ReadyForLogin:
                        <input @ref=LoginInput type="text" @bind="Email" name="username" placeholder="Enter your email" autocomplete="username webauthn" @onclick:stopPropagation="true" />
                        <div class="icon submit">
                            OK
                        </div>
                        break;
                    case LoginStates.VerifyingToken:
                    case LoginStates.VerifyingEmail:
                        <span>Signing you in...</span>
                        break;
                    case LoginStates.AwaitingMagicLink:
                        <span>Click the link in your email!</span>
                        break;
                    case LoginStates.LoggedIn:
                        <div class="login-menu__user">
                            <figcaption>Hi @Auth.User?.Username</figcaption>
                            <aside>@Kori.Language.</aside>
                        </div>
                        <div class="login-menu__actions">
                            <button class="profile-btn">Profile</button>
                            <button class="logout-btn" @onclick=LogoutAsync>Logout</button>
                            <button class="language-btn" _="on click toggle .show on .login-component__language">Language Settings</button>
                            <LanguageSelector />
                        </div>
                        break;
                    case LoginStates.Error:
                        <span>Error: @Auth.Message</span>
                        break;
                }
                            </div>
        </Authorized>
    </AuthorizeView>
</div>

@inject IJSRuntime Js
@inject IBlossomAuthenticator Auth
@inject Kori Kori

@code {
    [CascadingParameter] public ClaimsPrincipal? User { get; set; }
    [Parameter][SupplyParameterFromQuery] public string? Token { get; set; }

    public string? Email;
    ElementReference? LoginInput;
    Language? Language;

    protected override async Task OnInitializedAsync()
    {
        var languages = await Kori.GetLanguagesAsync();
        Language = languages.First(x => x.Id == Kori.Language);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync("initHyperScript");

        if (!firstRender || User == null)
            return;
    }

    async Task BeginLogin()
    {
        await foreach (var state in Auth.LoginAsync(User, Token))
            StateHasChanged();
    }

    async Task LogoutAsync()
    {
        await foreach (var state in Auth.LogoutAsync(User!))
            StateHasChanged();

        Auth.LoginState = LoginStates.LoggedOut;
        StateHasChanged();
    }
}