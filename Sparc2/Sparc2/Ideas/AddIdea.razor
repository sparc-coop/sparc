@if (CurrentStep == 0)
{
    <header>
        <h2>Be Part of Sparc</h2>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,</p>
    </header>
    <div class="form first-step-idea">
        <EditForm EditContext="@EditContext">
            <DataAnnotationsValidator />

            <label>
                <span>Title <span class="required">*</span> <ValidationMessage For="@(() => Idea.Title)" /> </span>
                <InputText placeholder="Name your contribution" @bind-Value="Idea.Title" />
            </label>
            <label>
                <span>Name <span class="required">*</span> <ValidationMessage For="@(() => Idea.Author)" /> </span>
                <InputText placeholder="Preferred name" @bind-Value="Idea.Author" />
            </label>
            <label>
                <span>Description</span>
                <InputTextArea placeholder="Text" @bind-Value="Idea.Description" />
            </label>
        </EditForm>
    </div>
}
else if (CurrentStep == 1)
{
    <div class="form">
        <EditForm EditContext="@EditContext">
            <section>
                <h3>Share files (Optional)</h3>
                <div>
                    <div>
                        Upload Files
                        <InputFile OnChange="HandleFileSelection" multiple />
                    </div>
                </div>
            </section>

            <section>
                <h3>Uploaded list (@UploadedFiles.Count)</h3>
                <ul>
                    @foreach (var file in UploadedFiles)
                    {
                        <li>
                            <article>
                                <img src="images/image-03.png" alt="File Icon" />
                                <div>
                                    <h2>@file.FileName</h2>
                                    <p>@(file.FileSize / (1024 * 1024)) MB</p>
                                </div>
                                <button @onclick="() => Remove(file)">x</button>
                            </article>
                            <div class="progress-bar">
                                <div class="progress" style="width: @file.Progress%"></div>
                            </div>
                        </li>
                    }
                </ul>
            </section>
        </EditForm>
    </div>
}

@inject Sparc.Blossom.Data.AzureBlobRepository Blobs

@code {
    [Parameter] public int CurrentStep { get; set; }
    [Parameter] public ProjectIdea Idea { get; set; } = new("", "", "", new());
    [Parameter] public required EditContext EditContext { get; set; }
    [Parameter] public List<Sparc2.Files.FileUpload> UploadedFiles { get; set; } = [];
    [Parameter] public EventCallback<List<Sparc2.Files.FileUpload>> OnFilesChanged { get; set; }
    [Parameter] public EventCallback<bool> OnUploadStatusChanged { get; set; }

    public async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        await OnUploadStatusChanged.InvokeAsync(true);

        foreach (var file in e.GetMultipleFiles())
        {
            var uploaded = new Sparc2.Files.FileUpload(
                file.Name,
                url: "",
                fileFormat: Path.GetExtension(file.Name)?.TrimStart('.') ?? "unknown",
                fileSize: (int)file.Size
            );

            UploadedFiles.Add(uploaded);
            StateHasChanged();

            var progress = new Progress<int>(percent =>
            {
                uploaded.Progress = percent;
                InvokeAsync(StateHasChanged);
            });

            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var item = new BlossomFile("uploads", file.Name, AccessTypes.Public, stream);
            await Blobs.AddAsync(item);
            uploaded.Url = item.Url!;
            Idea.FileUrls.Add(uploaded.Url);
        }

        await OnFilesChanged.InvokeAsync(UploadedFiles);
        await OnUploadStatusChanged.InvokeAsync(false);
    }

    private void Remove(Sparc2.Files.FileUpload file)
    {
        UploadedFiles.Remove(file);
        Idea.FileUrls.Remove(file.Url);
    }
}