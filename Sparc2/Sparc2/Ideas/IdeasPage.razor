@page "/ideas"
@layout PageLayout

<PageTitle>Ideas | Sparc</PageTitle>

<article class="explore draggable @(ShowIdeaModal ? "noscroll" : "")">
    @foreach (var idea in ProjectIdeas)
    {
        <div class="card-container draggable">
            <IdeaCard @key="idea.Id" Idea=@idea OnOpenIdeaModal="OpenIdeaModal" OnOpenComments="OpenComments" OnOpenFiles="OpenFiles" />
        </div>
    }
    @if (ShowIdeaModal)
    {
        <IdeaModal Idea=@CurrentIdea OnClose="CloseIdeaModal" FocusComments="FocusComments" FocusFiles="FocusFiles" OnEdit="@(idea => OpenEditModal(idea))" />
    }
    else if (ShowEditModal)
    {
        <AddCard OnClose="CloseEditModal"
                 SelectedHeaderButton="0"
                 IdeaToEdit="CurrentIdea"
                 StartOnFiles="FocusFiles" />
    }
</article>

@* <div class="modal-overlay"></div> *@

@code {
    bool ShowIdeaModal;
    Idea? CurrentIdea;
    IEnumerable<Idea> ProjectIdeas = new List<Idea>();
    bool FocusComments;
    bool FocusFiles;
    string? HighlightedIdeaId;
    bool ShowEditModal;
    bool StartOnFiles;

    protected override async Task OnInitializedAsync()
    {     
        IdeaService.OnIdeaPosted += UpdateIdeas;
        ProjectIdeas = await Api.ProjectIdeas.GetAllIdeas();        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await Js.InvokeVoidAsync("findCenter");
        await Js.InvokeVoidAsync("findCenter");

        if (HighlightedIdeaId is not null)
        {
            await Js.InvokeVoidAsync("highlightIdeaCard", HighlightedIdeaId);
            HighlightedIdeaId = null;
        }
    }

    private async Task UpdateIdeas()
    {
        var allIdeas = ProjectIdeas = await Api.ProjectIdeas.GetAllIdeas();

        if (IdeaService.LastPostedIdeaId != null)
        {
            var newId = IdeaService.LastPostedIdeaId;
            var newIdea = allIdeas.FirstOrDefault(i => i.Id == newId);
            var others = allIdeas.Where(i => i.Id != newId).ToList();

            int middleIndex = others.Count / 2;
            others.Insert(middleIndex, newIdea!);

            ProjectIdeas = others;
            HighlightedIdeaId = newId.ToString();
        }
        else
        {
            ProjectIdeas = allIdeas;
        }

        StateHasChanged();
    }       

    async Task OpenIdeaModal(Idea idea)
    {
        ShowIdeaModal = true;
        CurrentIdea = idea;
        await Js.InvokeVoidAsync("disableBodyScrolling", true);
    }

    async Task OpenComments(Idea idea)
    {
        ShowIdeaModal = true;
        CurrentIdea = idea;
        FocusComments = true;
        await Js.InvokeVoidAsync("disableBodyScrolling", true);
    }

    async Task OpenFiles(Idea idea)
    {
        ShowIdeaModal = true;
        CurrentIdea = idea;
        FocusFiles = true;
        await Js.InvokeVoidAsync("disableBodyScrolling", true);
    }

    async void CloseIdeaModal()
    {
        ShowIdeaModal = false;
        CurrentIdea = null;
        FocusComments = false;
        FocusFiles = false;
        await Js.InvokeVoidAsync("disableBodyScrolling", false);
    }

    public void Dispose()
    {
        IdeaService.OnIdeaPosted -= UpdateIdeas;
    }

    async Task OpenEditModal(Idea idea, bool startOnFiles = false)
    {
        CurrentIdea = idea;
        ShowEditModal = true;
        StartOnFiles = startOnFiles;
        await Js.InvokeVoidAsync("disableBodyScrolling", true);
    }

    void CloseEditModal()
    {
        ShowEditModal = false;
        CurrentIdea = null;
        StartOnFiles = false;
        Js.InvokeVoidAsync("disableBodyScrolling", false);
    }
}