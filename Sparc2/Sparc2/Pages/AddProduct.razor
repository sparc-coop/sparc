@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject NavigationManager NavManager
@using System.ComponentModel.DataAnnotations
@using Sparc.Blossom.Authentication
@using Sparc.Blossom.Billing
@using System.Globalization


@implements IDisposable

@if (_paymentSuccessful)
{
    <div class="payment-success">
        <h2>Thank You!</h2>
        <p>Your payment was successful.</p>
        <button class="btn btn-primary" @onclick="OnComplete">Done</button>
    </div>
}
else if (CurrentStep == 0)
{
    @if (CurrentStep == 0)
    {
        <div>
            <h2>@Product?.Name</h2>
            <p>Aptent facilisi torquent tempor sapien iaculis ultrices nisi porta lacus.</p>
            <div class="field-group">
                <label>Currency</label>
                <select value="@SelectedCurrency" @onchange="OnCurrencyChanged">
                    @foreach (var cur in CurrencyOptions ?? Enumerable.Empty<string>())
                    {
                        <option value="@cur">@cur.ToUpper()</option>
                    }
                </select>
            </div>

            @*             <div class="field-group">
                <label>Price</label>
                <p>
                    @if (SelectedCurrency == "brl")
                    {
                        @(DisplayPrice.ToString("C", CultureInfo.GetCultureInfo("pt-BR")))
                    }
                    else if (SelectedCurrency == "eur")
                    {
                        @(DisplayPrice.ToString("C", CultureInfo.GetCultureInfo("fr-FR")))
                    }
                    else
                    {
                        @(DisplayPrice.ToString("C", CultureInfo.GetCultureInfo("en-US")))
                    }
                </p>
            </div> *@

            <div class="field-group">
                <label>Amount (USD)</label>
                <div class="amount-grid">
                    @foreach (var amount in ConvertedPrices.OrderBy(x => x))
                    {
                        @* <button type="button" class="@GetAmountButtonClass(amount)" @onclick="() => SetAmount(amount)">$@amount</button> *@
                        <button type="button"
                                class="@GetAmountButtonClass(amount)"
                                @onclick="() => SetAmount(amount)">
                            @($"{GetCurrencySymbol(SelectedCurrency)}{amount}")
                        </button>
                    }
                    @* <ValidationMessage For="@(() => Donation.Amount)" /> *@
                </div>
            </div>

            @*             <button class="btn btn-primary" @onclick="ProceedToPaymentStep">
                Proceed to Payment
            </button> *@
        </div>

    }
}
else if (CurrentStep == 1 && !string.IsNullOrEmpty(_clientSecret))
{
    <h2>Payment Method</h2>
    <p>Please enter your payment details below.</p>
    <p>Amount: @Donation.Amount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-US")) (@Donation.Frequency)</p>

    <form id="payment-form">
        <div id="payment-element">
            <p>Loading payment form...</p>
        </div>
        <button id="submit-button" type="submit" class="btn btn-success">
            @(Donation.Frequency == "Monthly" ? "Setup Monthly Donation" : $"Pay {Donation.Amount:C}")
        </button>
        <div id="error-message" style="color:red; margin-top: 10px;"></div>
    </form>
    <button type="button" class="btn btn-secondary" @onclick="GoBack">Back</button>
}
else if (CurrentStep == 1 && string.IsNullOrEmpty(_clientSecret))
{
    <h2>Processing...</h2>
    <p>Preparing secure payment form...</p>
    <button type="button" class="btn btn-secondary" @onclick="GoBack">Back</button>
}

@code {
    [Parameter] public int CurrentStep { get; set; }
    [Parameter] public EventCallback OnNext { get; set; }
    [Parameter] public EventCallback OnBack { get; set; }
    [Parameter] public EventCallback OnComplete { get; set; }
    [Parameter] public string ProductId { get; set; } = default!;

    public class UserDonation
    {
        [Required]
        [Range(1.00, double.MaxValue, ErrorMessage = "Donation amount must be at least $1.00")]
        public decimal Amount { get; set; }

        [Required]
        public string Frequency { get; set; } = "One time";
    }

    private static readonly Dictionary<string, string> _currencySymbols
      = CultureInfo
          .GetCultures(CultureTypes.SpecificCultures)
          .Select(ci => ci.Name)                       // use the name, not the LCID
          .Where(name => !string.IsNullOrWhiteSpace(name))
          .Select(name =>
          {
              try
              {
                  return new RegionInfo(name);
              }
              catch
              {
                  return null;
              }
          })
          .Where(ri => ri != null)
          .GroupBy(ri => ri.ISOCurrencySymbol, StringComparer.OrdinalIgnoreCase)
          .ToDictionary(
            g => g.Key.ToLower(),                     // “usd”, “eur”, etc
            g => g.First().CurrencySymbol,             // “$”, “€” …
            StringComparer.OrdinalIgnoreCase
          );

    private readonly decimal[] PredefinedAmounts = { 5, 25, 50, 100, 250, 500 };
    private List<decimal> ConvertedPrices = new List<decimal>();
    private UserDonation Donation = new UserDonation();
    private decimal? _selectedPredefinedAmount = null;

    BlossomUser? CurrentUser;
    private GetProductResponse? Product;
    private string SelectedCurrency = "USD";
    private decimal DisplayPrice = 0m;
    List<string> CurrencyOptions = new List<string> { };

    private string? _clientSecret;
    private string? _publishableKey;
    private bool _stripeInitialized = false;
    private int _previousStep = -1;
    private string? _baseUrl;

    private bool _paymentSuccessful = false;
    private DotNetObjectReference<AddProduct>? dotNetHelper;

    protected async override Task OnInitializedAsync()
    {
        _publishableKey = Configuration["Stripe:PublishableKey"];
        if (string.IsNullOrEmpty(_publishableKey))
        {
            Console.Error.WriteLine("Stripe Publishable Key not configured!");
        }
        _previousStep = CurrentStep;
        _baseUrl = NavManager.BaseUri;

        CurrentUser = await SparcEngine.UserInfo();

        dotNetHelper = DotNetObjectReference.Create(this);

        Product = await SparcEngine.GetProductAsync("prod_SW5yY8O8KprzFu");

        var orderedCurrencies = Product.Prices[0].Keys.OrderBy(c => c).ToList() ?? new List<string>();
        CurrencyOptions = orderedCurrencies;

        var ri = new RegionInfo(System.Threading.Thread.CurrentThread.CurrentUICulture.LCID);
        var currentCurrencyInfo = ri.ISOCurrencySymbol;
        if (Product.Prices[0].ContainsKey(currentCurrencyInfo.ToLower()) == true)
        {
            SelectedCurrency = currentCurrencyInfo.ToLower();
        }
        else if (Product.Prices[0].ContainsKey("usd") == true)
        {
            SelectedCurrency = "usd";
        }
        else
        {
            SelectedCurrency = Product.Prices[0].Keys.FirstOrDefault()?.ToLower() ?? "usd";
        }

        UpdatePriceForCurrency();
    }

    private string GetCurrencySymbol(string isoCode)
    {
        if (isoCode == null) return string.Empty;
        var key = isoCode.ToLower();
        if (_currencySymbols.TryGetValue(key, out var sym))
            return sym;
        // fallback to the code itself (e.g. “AED”)
        return isoCode.ToUpper();
    }

    private Task OnCurrencyChanged(ChangeEventArgs e)
    {
        SelectedCurrency = e.Value?.ToString()?.ToLower() ?? SelectedCurrency;
        UpdatePriceForCurrency();
        return InvokeAsync(StateHasChanged);
    }

    private void UpdatePriceForCurrency()
    {
        if (Product is null) return;

        var curValues = Product.Prices
                .Where(dict => dict.ContainsKey(SelectedCurrency)).ToList();

        List<long> selectedCurValues = curValues
            .Select(d => d[SelectedCurrency])
            .ToList();

        ConvertedPrices.Clear();

        ConvertedPrices.AddRange(selectedCurValues.Select(c => c / 100m));
        if (!ConvertedPrices.Contains(0))
        {
            ConvertedPrices.Add(0);
        }
        ConvertedPrices.OrderBy(c => c);

        StateHasChanged();
    }

    private void SetAmount(decimal predefinedAmount)
    {
        Donation.Amount = predefinedAmount;
        _selectedPredefinedAmount = predefinedAmount;
        StateHasChanged();
    }

    private string GetAmountButtonClass(decimal amount)
    {
        return _selectedPredefinedAmount == amount && Donation.Amount == amount ? "btn selected" : "btn";
    }

    private async Task ProceedToPaymentStep()
    {
        Console.WriteLine($"Proceeding to payment: Amount={Donation.Amount}, Frequency={Donation.Frequency}");
        await OnNext.InvokeAsync();
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    private async Task CloseComponent()
    {
        await OnComplete.InvokeAsync();
    }

    [JSInvokable]
    public Task HandlePaymentSuccess()
    {
        _paymentSuccessful = true;
        _clientSecret = null;
        _stripeInitialized = false;
        Console.WriteLine("Payment successful signal received from JavaScript.");
        return InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_previousStep == 1 && CurrentStep == 0)
        {
            _paymentSuccessful = false;
            _clientSecret = null;
        }

        if (CurrentStep == 1 && _previousStep == 0 && !_paymentSuccessful)
        {
            Console.WriteLine("Transitioned to Step 1. Initiating PaymentIntent creation.");
            _stripeInitialized = false;
            _clientSecret = null;
            await InitiateStripePayment();
        }
        _previousStep = CurrentStep;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CurrentStep == 1 && !_paymentSuccessful && !string.IsNullOrEmpty(_clientSecret) && !string.IsNullOrEmpty(_publishableKey) && !_stripeInitialized)
        {
            Console.WriteLine("ClientSecret received, initializing Stripe Payment Element via JS interop.");
            _stripeInitialized = true;
            try
            {
                await JS.InvokeVoidAsync(
                    "stripeIntegration.initPaymentForm",
                    _clientSecret,
                    _publishableKey,
                    dotNetHelper,
                    _baseUrl
                );
                Console.WriteLine("Stripe JS initialization invoked.");
            }
            catch (JSException jsEx)
            {
                Console.Error.WriteLine($"Error invoking JS function: {jsEx.Message}");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"General error during Stripe init: {ex.Message}");
            }
        }
    }

    private async Task InitiateStripePayment()
    {
        if (Donation.Amount <= 0)
        {
            Console.Error.WriteLine("Invalid amount for payment intent.");
            await GoBack();
            return;
        }

        try
        {
            long amountInCents = (long)(Donation.Amount * 100);
            string? setupFutureUsage = null;

            var metadata = new Dictionary<string, string> {
                { "DonationFrequency", Donation.Frequency },
                { "DonationAmount", Donation.Amount.ToString() },
                { "product_id", Product.Id }
            };

            string? customerId = null;
            if (CurrentUser != null)
            {
                customerId = CurrentUser.Id;
            }

            CreateOrderPaymentRequest request = new(
                amountInCents,
                SelectedCurrency,
                customerId,
                null,
                metadata,
                setupFutureUsage
            );

            var intent = await SparcEngine.CreateOrderPaymentAsync(request);

            _clientSecret = intent.ClientSecret;
            Console.WriteLine($"PaymentIntent created. ClientSecret obtained: {!string.IsNullOrEmpty(_clientSecret)}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating PaymentIntent: {ex.Message}");
            _clientSecret = null;
            StateHasChanged();
        }
    }

    private async Task GoBack()
    {
        _clientSecret = null;
        _stripeInitialized = false;
        await OnBack.InvokeAsync();
    }
}