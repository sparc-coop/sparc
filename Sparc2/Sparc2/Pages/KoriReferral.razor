@using Sparc.Blossom.Authentication
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms

@page "/kori"

<PageTitle>Kori</PageTitle>

<section>
    <div class="line"></div>

    <Breadcrumbs Items="@BreadcrumbItems" />

    <header>
        <h1>Kori Beta Referral Program at Sparc</h1>
    </header>

    <section class="landing">
        <div class="landing-text">
            <h2>
                Refer friends to Kori
                <br />
                Get rewards in return
            </h2>

            <section>
                <h3>Support Kori</h3>
                <p>Help Kori enhance content management experiences.</p>
            </section>

            <section>
                <h3>Test New Tool</h3>
                <p>Be among the first to try the new content management tool.</p>
            </section>

            <section>
                <h3>Make an Impact</h3>
                <p>Your feedback will significantly improve the tool’s functionality.</p>
            </section>
        </div>

        <Landing />
    </section>

    <section class="cta">
        @if (IsCheckingUser)
        {

        }
        else if (HasKoriAccess)
        {
            <h4>You already have access! Click <a href="" target="_blank">here</a> to go to Kori Beta app!</h4>
        }
        else
        {
            @if (IsAddingProduct || ShowEmailModal)
            {
                <div class="loader"></div>
            }
            else
            {
                <button @onclick="TryAuthAndJoinBeta">
                    Try Beta Program Testing
                    <ArrowRight />
                </button>
                <small>* Referral access required *</small>
            }
        }
    </section>

    <section class="how-it-works">
        <h3>How it works</h3>
        <div class="articles">
            <article>
                <CloudElement />
                <div>
                    <h5>1) Refer Kori to your friends</h5>
                    <p>Share your unique code with friends, marketing agencies, and social media pros!</p>
                </div>
            </article>

            <article>
                <BlogElement />
                <div>
                    <h5>2) Software Insights & Kori Demo</h5>
                    <p>Discuss your tools currently used with your organization. Learn about the features and benefits of the Kori software demo.</p>
                </div>
            </article>

            <article>
                <ContentElement />
                <div>
                    <h5>3) Feedback</h5>
                    <p>Share feedback on product usage, overall impressions, and suggestions for improvement.</p>
                </div>
            </article>

            <article>
                <CurveLineElement />
                <div>
                    <h5>4) Feedback Usage</h5>
                    <p>Utilize feedback from beta testers to enhance Kori product features.</p>
                </div>
            </article>
        </div>
    </section>

    <section class="kori-updates">
        <div>
            <h3>Kori Beta Referral Program</h3>
            <p>The Kori Beta Program provides an easy way to explore pre-release versions of Kori and test our new features. Your feedback will assist us in pinpointing and resolving issues to further enhance the platform. Devices enrolled in the program will automatically receive updates for the latest beta version of Kori through the Sparc community.</p>
        </div>

        <div>
            <h3>Latest updates</h3>
            <p>Share updates that provide early access to test upcoming features of our unreleased platform, which is currently in active development.</p>
            <a href="" target="_blank">See more updates</a>
        </div>
    </section>

    <section class="faq">
        <h3>Beta Referral Program FAQs</h3>
        <p>Find the most frequently asked questions and answers for Kori Beta Program</p>

        <FaqItem Title="How often will I receive beta updates">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="What does Kori do?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="How long does the beta program last?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="How long does it take to recceive the updates after opting in or out?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="What happens to my feedback and suggestions?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="How do I verify that I'm running a beta version of Kori?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="How can I  opt out and return to a public Kori release?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="How do I report bugs or give feedbacks?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="Am II allowed to post betas on social media or stream/broadcast my experience?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
        <FaqItem Title="Who should I refer to?">
            <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Sit amed consectur adipiscing elit quisque faucibus ex. Adipiscing elit quisque faucibus ex sapien vitae pellentesque.</p>
        </FaqItem>
    </section>

    <footer class="terms">
        Please see the <a href="" target="_blank">Kori Beta Program at Sparc Terms</a> for more information.
    </footer>
</section>

@if (ShowEmailModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <header>
                <h3>Please enter your email:</h3>
            </header>
            <div>
                <InputText @bind-Value="Email" />
            </div>
            <footer>
                <button class="primary-btn" @onclick="OnEmailEntered">Save</button>
            </footer>
        </div>
    </div>
}

@if (ShowVerificationModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <header>
                <h3>Enter the verification code sent to @CurrentVerificationDestination</h3>
            </header>
            <div>
                <InputText @bind-Value="VerificationCode" />
                @if (!string.IsNullOrEmpty(VerificationError))
                {
                    <p class="error-text">@VerificationError</p>
                }
            </div>
            <footer>
                <button class="primary-btn" @onclick="VerifyCodeAndJoinBeta">Verify</button>
            </footer>
        </div>
    </div>
}


@code {
    BlossomUser? CurrentUser;
    private bool IsCheckingUser = true;
    private bool IsAddingProduct = false;
    string? Message;
    private bool ShowEmailModal = false;
    private string Email { get; set; } = string.Empty;
    private string VerificationCode { get; set; } = "";
    private string CurrentVerificationDestination = "";
    private string VerificationError = "";
    private bool ShowVerificationModal = false;

    private bool HasKoriAccess => CurrentUser?.Products?.Any(p => p.ProductName == "Kori") == true;

    private readonly List<(string, string)> BreadcrumbItems = new()
    {
        ("Sparc", "/"),
        ("Kori Beta Referral Program", "/kori")
    };

    protected override async Task OnInitializedAsync() => await GetUserInfo();

    private async Task GetUserInfo()
    {
        IsCheckingUser = true;
        try
        {
            CurrentUser = await SparcEngine.UserInfo();
        }
        finally
        {
            IsCheckingUser = false;
        }
    }

    private async Task AddKoriProduct()
    {
        await SparcEngine.AddUserProduct(new AddProductRequest("Kori"));
        await GetUserInfo();
    }

    private async Task TryAuthAndJoinBeta()
    {
        if (IsAddingProduct || HasKoriAccess)
            return;

        IsAddingProduct = true;
        Message = null;

        try
        {
            if (CurrentUser.Token == null)
            {
                // 1. Sign up with passkey
                var start = await Http.PostAsync("auth/login", null);
                if (!start.IsSuccessStatusCode) { Message = $"⚠️ Signup start failed."; return; }

                var doc = await start.Content.ReadFromJsonAsync<JsonDocument>();
                if (!doc.RootElement.TryGetProperty("token", out var tok)) { Message = "⚠️ No registration token."; return; }
                var challenge = tok.GetString();

                var passkey = await JS.InvokeAsync<string>("signUpWithPasskey", challenge);
                if (string.IsNullOrWhiteSpace(passkey)) { Message = "⚠️ Passkey signup aborted."; return; }

                var finish = await Http.PostAsync($"auth/login?emailOrToken={Uri.EscapeDataString(passkey)}", null);
                if (finish.IsSuccessStatusCode)
                {
                    CurrentUser = await finish.Content.ReadFromJsonAsync<BlossomUser>();
                    Message = "✅ Signed up & logged in!";
                }
                else
                {
                    var err = await finish.Content.ReadAsStringAsync();
                    Message = $"❌ Signup failed: {finish.StatusCode} – {err}";
                }
            }            

            // 2. Retrieve authenticated user
            await GetUserInfo();
            if (CurrentUser is null)
            {
                Message = "⚠️ Could not fetch user after login."; return;
            }

            // 3. Modal: request
            if (string.IsNullOrWhiteSpace(CurrentUser.Email))
            {
                ShowEmailModal = true;
                StateHasChanged();
                return;
            }
        }
        catch (Exception ex)
        {            
            Message = $"❌ Unexpected error: {ex.Message}";
        }
    }

    private async Task OnEmailEntered()
    {
        if (string.IsNullOrWhiteSpace(Email))
        {
            Message = "⚠️ Email is required to join the beta.";
            return;
        }

        try
        {
            // 4. Modal: save email
            var patchResp = await SparcEngine.UpdateUser(
                new UpdateUserRequest(Email: Email, RequireEmailVerification: true)
            );

            if (patchResp is null)
            {
                Message = "⚠️ Failed to save email.";
                return;
            }

            CurrentVerificationDestination = Email;
            VerificationCode = "";
            VerificationError = "";
            ShowEmailModal = false;
            ShowVerificationModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Message = $"❌ Error while saving email: {ex.Message}";
        }
    }

    private async Task VerifyCodeAndJoinBeta()
    {
        
        ShowVerificationModal = false;
        VerificationError = "";
        IsAddingProduct = true;
        StateHasChanged(); 

        try
        {
            // 5. Verify code
            var success = await SparcEngine.VerifyCode(
                new VerificationRequest(CurrentVerificationDestination, VerificationCode)
            );

            if (success)
            {
                // 6. Add Kori product
                await AddKoriProduct();
            }
            else
            {
                VerificationError = "Invalid verification code. Please try again.";
                ShowVerificationModal = true;
            }
        }
        catch (Exception ex)
        {
            VerificationError = $"Error verifying code: {ex.Message}";
            ShowVerificationModal = true;
        }
        finally
        {
            IsAddingProduct = false;
            VerificationCode = "";
            StateHasChanged(); 
        }
    }
}
