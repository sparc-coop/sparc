@page "/chat"
@using SlackNet
@using SlackNet.Events
@using SlackNet.WebApi
@using Sparc2.Services
@inject ISlackIntegrationService SlackService

<h3>Slack Channel Messages</h3>

<select class="form-select mb-2" @onchange="ChannelChanged">
    @if (Channels == null)
    {
        <option disabled>Loading channels...</option>
    }
    else
    {
        @foreach (var ch in Channels)
        {
            <option value="@ch.Id">@ch.Name</option>
        }
    }
</select>

<button class="btn btn-secondary mb-3" @onclick="LoadMessages" disabled="@string.IsNullOrEmpty(SelectedChannelId)">Load Messages</button>

@if (Messages == null)
{
    <p>Loading messages...</p>
}
else if (!Messages.Any())
{
    <p>No messages in this channel.</p>
}
else
{
    <ul class="list-group">
        @foreach (var msg in Messages.OrderBy(m => m.ThreadTs))
        {
            <li class="list-group-item">
                <small class="text-muted">@msg.User (@msg.ThreadTs)</small><br />
                @msg.Text
            </li>
        }
    </ul>
}

@code {
    private List<Conversation> Channels = [];
    private string? SelectedChannelId;
    private List<MessageEvent> Messages = [];

    protected override async Task OnInitializedAsync()
    {
        Channels = (await SlackService.GetChannelsAsync(excludeArchived: false)).ToList();
        if (Channels.Any())
        {
            SelectedChannelId = Channels.First().Id;
            await LoadMessages();
        }
    }

    private async Task ChannelChanged(ChangeEventArgs e)
    {
        SelectedChannelId = e.Value?.ToString();
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        Messages = (await SlackService.GetMessagesAsync(new[] { SelectedChannelId! })).ToList();
    }
}