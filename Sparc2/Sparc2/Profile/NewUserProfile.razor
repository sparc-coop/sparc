@using Sparc.Blossom.Authentication

<div class="modal-overlay">
    <article>
        <header>
            <div>
                <ProfileIcon />
                <h3>Profile</h3>
            </div>
            <button type="button" aria-label="Close" onclick="@HandleClose"><XIcon /></button>
        </header>
        <section>
            <div class="column">
                @if (VerifyContact)
                {
                    <section class="verify-contact">
                        <header>
                            <h4>Verify Contact</h4>
                            <p>To keep your account secure, help with recovery, and support cross-device access, please verify your contact. This setting is optional.</p>
                        </header>
                        <div>
                            <input type="text" placeholder="Phone number or Email" />
                            <button type="button" class="primary-btn">Verify</button>
                        </div>
                        <ul>
                            <li>
                                <div>
                                    <span>xxx-xxx-5678</span>
                                    @if (IsVerified)
                                    {
                                        <Check />
                                    }
                                </div>
                                <button>Unlink</button>
                            </li>
                            <li>
                                <div>
                                    <span>xxxxx@Kuviocreative.com</span>
                                    @if (IsVerified)
                                    {
                                        <Check />
                                    }
                                </div>
                                <button>Unlink</button>
                            </li>
                        </ul>
                    </section>
                }
                else if (LoginWithPasskey)
                {
                    <section class="login">
                        <header>
                            <h4>Login</h4>
                            <p>Use your passkey to sign in. If it’s your first time, you can create one along the way.</p>
                        </header>
                        <div>
                            <button type="button" class="primary-btn">Continue with Passkey</button>
                        </div>                        
                    </section>
                }
                else if (RegisteringPasskey)
                {
                    <section class="registering">
                        <header>
                            <Key />
                            <h4>Registering your passkey...</h4>
                            <p>You may use your device’s fingerprint, face scan, or screen lock. Your passkey may be saved to your browser account so you can use it on other devices.</p>
                        </header>
                        <div>
                            <button type="button" class="primary-btn" disabled>Continue with Passkey</button>
                        </div>
                    </section>
                }

                <section class="app-links">
                    <header>
                        <h4>Your Apps</h4>
                        <p>Select app images to go to app page or store page</p>
                    </header>
                    <div>
                        <img src="/images/LogoMosaic.png" alt="App 1" />
                        <img src="/images/background-noise.png" alt="App 2" />
                    </div>
                </section>

            </div>

            <div class="column">
                <section class="profile-customization">
                    <header>
                        <h4>Profile</h4>
                        <p>Customize your profile!</p>
                    </header>
                    <div>
                        @if (UserAvatar == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <figure class="avatar @(HasEmoji ? "emoji" : "")" style="background-color: @UserAvatar.BackgroundColor">
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <text x="50%" y="60%" font-size="80" text-anchor="middle" dominant-baseline="middle" style="fill: @UserAvatar.ForegroundColor">
                                        @(!string.IsNullOrWhiteSpace(UserAvatar?.Emoji) ? UserAvatar.Emoji : (!string.IsNullOrWhiteSpace(UserAvatar?.Initials) ? UserAvatar.Initials : ""))
                                    </text>
                                </svg>
                            </figure>
                        }
                    </div>
                    <div>
                        <ColorSelector @bind-BackgroundColor="UserAvatar.BackgroundColor" />
                        <EmojiSelector Emoji="@UserAvatar.Emoji" EmojiChanged="HandleEmojiChanged" />
                    </div>
                </section>
            </div>

            <div class="column">
                <section class="user-details">
                    <header>
                        <h4>Tell us about you</h4>
                    </header>
                    <div class="account-details">
                        <label>
                            Name
                            @* <input @bind="UserAvatar.Username" @bind:event="oninput" placeholder="Your Name" @onblur=Save /> *@
                            <input type="text" placeholder="Your Name" />
                        </label>
                        <label>
                            Pronouns (Optional)
                            @* <input @bind="UserAvatar.Pronouns" @bind:event="oninput" placeholder="She/her, He/him, They/them" @onblur=Save /> *@
                            <input type="text" placeholder="She/her, He/him, They/them" />
                        </label>

                        <label>
                            About You (Optional)
                            @* <textarea @bind="UserAvatar.Description"
                              @bind:event="oninput"
                              @onblur=Save
                              placeholder="Enter a little about yourself" /> *@
                            <textarea placeholder="Enter a little about yourself" />
                        </label>
                    </div>
                </section>

                <section class="language-selector">
                    <header>
                        <h4>Language</h4>
                    </header>
                    <tovik-language></tovik-language>
                </section>
            </div>
        </section>
    </article>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public bool SpillBackground { get; set; }
    [Parameter] public EventCallback<string> OnEmojiChanged { get; set; }

    public BlossomAvatar? UserAvatar { get; set; } = new BlossomAvatar();

    bool HasEmoji => !string.IsNullOrWhiteSpace(UserAvatar?.Emoji);

    private string VerificationCode { get; set; } = "";
    private bool IsVerified = true;
    private bool VerifyContact = true;
    private bool LoginWithPasskey;
    private bool RegisteringPasskey;

    // BlossomUser? CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        var user = await SparcEngine.UserInfo();
        UserAvatar = user?.Avatar;

        Console.WriteLine($"DEBUG: UserAvatar {(UserAvatar == null ? "is NULL" : "is OK")}");

        if (UserAvatar == null)
            return;

        StateHasChanged();
    }

    private async Task HandleClose()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
    }

    async Task Save()
    {
        await SparcEngine.UpdateUserInfo(UserAvatar);
    }

    private async Task HandleEmojiChanged(string emoji)
    {
        UserAvatar.Emoji = emoji;
        await OnEmojiChanged.InvokeAsync(emoji);
    }

    private async Task VerifyCode(string code)
    {
        VerificationCode = code;
        // var success = await SparcEngine.VerifyCode(new VerificationRequest(CurrentVerificationDestination, VerificationCode));
        // if (success)
        // {
        //     await SparcEngine.UserInfo();
        //     StateHasChanged();
        // }
        // else
        // {
        //     // VerificationError = "Invalid verification code. Please try again.";
        // }
    }
}