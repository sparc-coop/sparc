@page "/catalog/{ProductId}"
@layout CatalogLayout

<article class="product-page">
    <div class="page-container">
        <div class="left">
            @if (ActiveProduct.FileUrls.Count > 1)
            {
                <div id="img-1" class="product-img span-1"></div>
                <div id="img-2" class="product-img span-1"></div>
                <div class="img-container span-2">
                    <div id="img-3" class="product-img"></div>
                    <div id="img-4" class="product-img"></div>
                </div>
                <div id="img-5" class="product-img img-5 span-1"></div>

            } else if (ActiveProduct.FileUrls.Count == 5)
            {
                <div id="img-1" class="product-img span-1"></div>
                <div id="img-2" class="product-img span-1"></div>
                <div class="img-container span-2">
                    <div id="img-3" class="product-img"></div>
                    <div id="img-4" class="product-img"></div>
                </div>
                <div id="img-5" class="product-img img-5 span-1"></div>
            } else
            {
                foreach (var file in ActiveProduct.FileUrls)
                {
                    <div id="img-@file"class="product-img span-1"></div>
                }
            }
        </div>
        <div class="right">
            <div class="container">
                <div class="right-header">
                    <button @onclick='() => Nav.NavigateTo("/catalog")'><ArrowLeftIcon /></button>
                </div>
                @if (ActiveProduct != null)
                {
                    <ProductInfo ActiveProduct="ActiveProduct" />
                } else
                {
                    <div class="product-info">
                        <header>
                            <h3>Select a product</h3>
                            <p>Hover over each product image to view more details</p>
                        </header>
                    </div>
                }
            </div>
        </div>
    </div>
</article>

@code {
    [Parameter] public string? ProductId { get; set; }

    IEnumerable<Product> Products = new List<Product>();
    Product? ActiveProduct;

    protected override async Task OnInitializedAsync()
    {
        ProductService.OnProductsChanged += UpdateProducts;
        var allProducts = await Api.Products.GetAllProducts();

        Products = allProducts;
        if (Products != null)
        {
            ActiveProduct = Products.FirstOrDefault(x => x.Id == ProductId);

            if (ActiveProduct == null)
            {
                ActiveProduct = Products.FirstOrDefault();
            }
        }
    }

    private async Task UpdateProducts()
    {
        var allProducts = await Api.Products.GetAllProducts();
        var latest = allProducts.OrderByDescending(i => i.DateCreated).FirstOrDefault();

        // if (latest != null)
        // {
        //     var list = allProducts.Where(i => i.Id != latest.Id).ToList();
        //     int middleIndex = list.Count / 2;
        //     list.Insert(middleIndex, latest);
        //     Products = list;
        //     LatestProduct = latest;
        // }
        // else
        // {
        //     Products = allProducts;
        // }
        StateHasChanged();
    }
}