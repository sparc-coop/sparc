<div id="payment-element">
    <p style="font-size: 16px">Loading payment form...</p>
</div>

<button id="submit-button" type="submit" class="btn btn-success">
</button>

<div id="error-message" style="color:red; margin-top: 10px;"></div>

@inject IConfiguration Configuration
@code {
    [Parameter] public CreateOrderRequest Order { get; set; } = default!;

    private string? _clientSecret;
    private string? _publishableKey;
    private string? _baseUrl;

    private DotNetObjectReference<ProductPurchaseStripeForm>? dotNetHelper;

    protected override void OnInitialized()
    {
        _publishableKey = Configuration["Stripe:PublishableKey"];
        if (string.IsNullOrEmpty(_publishableKey))
        {
            Console.Error.WriteLine("Stripe Publishable Key not configured!");
        }

        _baseUrl = Nav.BaseUri;

        dotNetHelper = DotNetObjectReference.Create(this);
    }

    public async Task InitiateStripePayment()
    {
        try
        {
            CreateOrderPaymentRequest request = new(
                (long)(Order.Amount * 100),
                Order.Currency,
                null,
                null,
                new Dictionary<string, string>(),
                null
            );

            var intent = await Billing.CreateOrderPaymentAsync(request);

            _clientSecret = intent.ClientSecret;
            StateHasChanged();

            await Js.InvokeVoidAsync(
              "stripeIntegration.initPaymentForm",
              _clientSecret,
              _publishableKey,
              dotNetHelper,
              _baseUrl
            );
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating PaymentIntent: {ex.Message}");
            _clientSecret = null;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public Task HandlePaymentSuccess()
    {
        _clientSecret = null;
        Console.WriteLine("Payment successful signal received from JavaScript.");
        return InvokeAsync(StateHasChanged);
    }
}
