@using Sparc.Engine.Aura

<h5>Billing Information</h5>

<label>
    <span>Would you like an email receipt? Enter your email here (optional)</span>
    <input @bind="Email" placeholder="Email" />
</label>

@if (!string.IsNullOrWhiteSpace(VerificationError))
{
    <p class="error-text">@VerificationError</p>
}

@inject ISparcAura Aura
@code {
    [Parameter] public string? UserEmail { get; set; }
    [Parameter] public EventCallback<bool> OnEmailVerified { get; set; }

    string Email = "";
    private string? LastVerifiedEmail;
    private string? VerificationCode;
    private string VerificationError = "";
    private string? CurrentVerificationDestination;
    private bool IsVerifyingCode = false;
    private bool IsSendingCode = false;
    private bool ShowSuccessMessage = false;

    private bool IsVerified =>
        !string.IsNullOrWhiteSpace(UserEmail) &&
        UserEmail == Email;

    private bool ShowVerification =>
        !string.IsNullOrWhiteSpace(CurrentVerificationDestination) &&
        !IsVerified &&
        !ShowSuccessMessage;

    private bool IsValidEmail(string email)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(
            email,
            @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );
    }

    private async Task HandleEmailBlur()
    {
        var email = Email?.Trim();

        if (string.IsNullOrWhiteSpace(email) || email == LastVerifiedEmail)
            return;

        if (!IsValidEmail(email))
        {
            VerificationError = "Please enter a valid email address.";
            StateHasChanged();
            return;
        }

        IsSendingCode = true;
        VerificationError = "";
        StateHasChanged();

        try
        {
            var resp = await Aura.Login(email);

            if (resp is not null)
            {
                CurrentVerificationDestination = email;
                LastVerifiedEmail = email;
                VerificationCode = "";
                ShowSuccessMessage = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error sending verification code: " + ex.Message);
            VerificationError = "Something went wrong. Please try again.";
        }
        finally
        {
            IsSendingCode = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task VerifyCode()
    {
        if (string.IsNullOrWhiteSpace(VerificationCode)) return;

        IsVerifyingCode = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var success = await Aura.Login(VerificationCode);
            IsVerifyingCode = false;
            await InvokeAsync(StateHasChanged);

            if (success is not null)
            {
                VerificationError = "";
                ShowSuccessMessage = true;
                CurrentVerificationDestination = null;
                VerificationCode = "";

                await OnEmailVerified.InvokeAsync(true);

                _ = Task.Run(async () =>
                {
                    await Task.Delay(10000);
                    ShowSuccessMessage = false;
                    await InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                VerificationError = "Invalid code. Please try again.";
            }
        }
        catch (Exception ex)
        {
            VerificationError = $"Error verifying code: {ex.Message}";
        }
    }
}