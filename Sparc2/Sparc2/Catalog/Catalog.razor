@page "/store"
@layout CatalogLayout

<article id="catalog" class="catalog">
    <div class="page-container">
        <div class="left">
            <div class="left-container">
                <div class="spacer mobile-only"></div>
                @foreach (var app in Products)
                {
                    <div id="@app.Id" class="product product-card" data-id="@app.Id">
                        <div class="product card-overlay" data-id="@app.Id"></div>
                        <div class="product title" data-id="@app.Id"><h4 class="product" data-id="@app.Id">@app.Title</h4></div>
                    </div>
            }
            </div>
        </div>
        <div class="right">
            <div class="right-container">
                @if (ActiveProduct != null)
                {
                    <ProductInfo PageType="Catalog" ActiveProduct="ActiveProduct" />
                } else
                {
                    <div class="product-info">
                    </div>
                }
            </div>
        </div>
    </div>
</article>

@code {
    IEnumerable<Product> Products = new List<Product>();
    Product? ActiveProduct;

    protected override async Task OnInitializedAsync()
    {
        var allProducts = await Api.Products.GetAllProducts();
        if (allProducts.Count() == 1)
            Nav.NavigateTo($"/store/{allProducts.First().Id}");
        else
        {
            Products = allProducts;
            if (Products != null)
            {
                ActiveProduct = Products.FirstOrDefault();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("initCatalog", DotNetObjectReference.Create(this));

            foreach (var product in Products)
            {
                await Js.InvokeVoidAsync("hoverProductInView", DotNetObjectReference.Create(this), product.Id);
            }
        }
    }

    private async Task UpdateProducts()
    {
        var allProducts = await Api.Products.GetAllProducts();
        var latest = allProducts.OrderByDescending(i => i.DateCreated).FirstOrDefault();

        // if (latest != null)
        // {
        //     var list = allProducts.Where(i => i.Id != latest.Id).ToList();
        //     int middleIndex = list.Count / 2;
        //     list.Insert(middleIndex, latest);
        //     Products = list;
        //     LatestProduct = latest;
        // }
        // else
        // {
        //     Products = allProducts;
        // }
        StateHasChanged();
    }

    [JSInvokable("OnHoverProduct")]
    public void OnHoverProduct(string id)
    {
        if (Products != null && Products.Any())
        {
            ActiveProduct = Products.FirstOrDefault(p => p.Id == id);
            StateHasChanged();
        }
    }

    [JSInvokable("OnSelectProduct")]
    public void OnSelectProduct(string id)
    {
        if (Products != null && Products.Any())
        {
            ActiveProduct = Products.FirstOrDefault(p => p.Id == id);
            StateHasChanged();
        }

        Nav.NavigateTo($"/store/{id}");
    }

    void ViewProductInfo(string id)
    {
        Js.InvokeVoidAsync("hoverProductInView", DotNetObjectReference.Create(this), id);
    }
}