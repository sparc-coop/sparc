@using System.Globalization
<div class="form-group">
    <label>
        <span>Currency *</span>
        <select value="Order.Currency" @onchange="OnCurrencyChanged">
            @foreach (var cur in CurrencyOptions ?? Enumerable.Empty<string>())
            {
                <option value="@cur" selected="@(Order.Currency == cur ? "selected" : null)">@cur.ToUpper()</option>
            }                            
        </select>
    </label>
</div>
<div class="form-group">
    <label>
        <span>Amount</span>
    </label>
    <div class="amount-grid">
        @foreach (var amount in ConvertedPrices.OrderBy(x => x))
        {
            <button type="button"
                    class="@GetAmountButtonClass(amount)"
                    @onclick="() => SetAmount(amount)">
                @($"{GetCurrencySymbol(Order.Currency)}{amount}")
            </button>
        }
    </div>
</div>
<ProductPurchaseStripeForm @ref="StripeFormRef" Order="Order"></ProductPurchaseStripeForm>

@code {
    [Parameter] public GetProductResponse? StripeProduct { get; set; }
    [Parameter] public CreateOrderRequest Order { get; set; } = default!;
    private ProductPurchaseStripeForm? StripeFormRef;

    public List<string> CurrencyOptions { get; set; } = new();
    private List<decimal> ConvertedPrices = new List<decimal>();
    private Dictionary<string, string> CurrencySymbols;
    private decimal? _selectedPredefinedAmount = null;


    protected async override void OnParametersSet()
    {
        if (StripeProduct is null || StripeProduct.Prices.Count == 0)
            return;

        GetAllCurrencySymbols();

        if (StripeProduct != null)
        {
            GetUserCurrency();
        }

        var orderedCurrencies = StripeProduct.Prices[0].Keys.OrderBy(c => c).ToList() ?? new List<string>();
        CurrencyOptions = orderedCurrencies;

        UpdatePriceForCurrency();

        if (Order.Amount > 0 && StripeFormRef is not null)
        {
            await StripeFormRef.InitiateStripePayment();
        }
    }

    public void GetUserCurrency()
    {
        var ri = new RegionInfo(System.Threading.Thread.CurrentThread.CurrentUICulture.LCID);
        var currentCurrencyInfo = ri.ISOCurrencySymbol;
        if (StripeProduct.Prices[0].ContainsKey(currentCurrencyInfo.ToLower()) == true)
        {
            Order.Currency = currentCurrencyInfo.ToLower();
        }
        else if (StripeProduct.Prices[0].ContainsKey("usd") == true)
        {
            Order.Currency = "usd";
        }
        else
        {
            Order.Currency = StripeProduct.Prices[0].Keys.FirstOrDefault()?.ToLower() ?? "usd";
        }
    }

    private void GetAllCurrencySymbols()
    {
        CurrencySymbols = CultureInfo
          .GetCultures(CultureTypes.SpecificCultures)
          .Select(ci => ci.Name)
          .Where(name => !string.IsNullOrWhiteSpace(name))
          .Select(name =>
          {
              try
              {
                  return new RegionInfo(name);
              }
              catch
              {
                  return null;
              }
          })
          .Where(ri => ri != null)
          .GroupBy(ri => ri!.ISOCurrencySymbol, StringComparer.OrdinalIgnoreCase)
          .ToDictionary(
            g => g.Key.ToLower(),
            g => g.First()!.CurrencySymbol,
            StringComparer.OrdinalIgnoreCase
          );
    }

    private string GetCurrencySymbol(string isoCode)
    {
        if (isoCode == null) return string.Empty;
        var key = isoCode.ToLower();
        if (CurrencySymbols.TryGetValue(key, out var sym))
            return sym;

        return isoCode.ToUpper();
    }

    private async Task OnCurrencyChanged(ChangeEventArgs e)
    {
        Order.Currency = e.Value?.ToString()?.ToLower() ?? Order.Currency;
        UpdatePriceForCurrency();

        if (Order.Amount > 0 && StripeFormRef is not null)
            await StripeFormRef.InitiateStripePayment();
        StateHasChanged();
    }

    private async Task SetAmount(decimal predefinedAmount)
    {
        Order.Amount = (long)predefinedAmount;
        _selectedPredefinedAmount = predefinedAmount;

        if (Order.Amount > 0 && StripeFormRef is not null)
            await StripeFormRef.InitiateStripePayment();

        StateHasChanged();
    }

    private void UpdatePriceForCurrency()
    {
        if (StripeProduct is null) return;

        var curValues = StripeProduct.Prices
                .Where(dict => dict.ContainsKey(Order.Currency)).ToList();

        List<long> selectedCurValues = curValues
            .Select(d => d[Order.Currency])
            .ToList();

        ConvertedPrices.Clear();

        ConvertedPrices.AddRange(selectedCurValues.Select(c => c / 100m));
        if (!ConvertedPrices.Contains(0))
        {
            ConvertedPrices.Add(0);
        }
        ConvertedPrices.OrderBy(c => c);

        Order.Amount = (long)ConvertedPrices.FirstOrDefault();

        StateHasChanged();
    }

    private string GetAmountButtonClass(decimal amount)
    {
        return _selectedPredefinedAmount == amount && Order.Amount == amount ? "btn selected" : "btn";
    }
}
