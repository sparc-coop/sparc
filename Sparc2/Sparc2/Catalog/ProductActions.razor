@using Sparc.Engine
@using Sparc.Engine.Aura

<div class="product-actions">
    <div class="tabs">
        @if (OwnsProduct)
        {
            <button id="download-tab" class="product-tab @(ActiveTab == "Download" ? "active" : "")" @onclick="@(() => OnClickTab("Download"))">
                <h6>Go to @ActiveProduct.Id &rarr;</h6>
            </button>
        }
        else
        {
            <button id="demo-tab" class="product-tab @(ActiveTab == "Download" ? "active" : "")" @onclick="@(() => OnClickTab("Download"))">
                <h6>Try @ActiveProduct.Id &rarr;</h6>
            </button>
        }

        @if (Price != null)
        {
            <button id="purchase-tab" class="product-tab @(ActiveTab == "Purchase" ? "active" : "")" @onclick="@(() => OnClickTab("Purchase"))">
                <h6>@(HasPurchasedProduct ? "Purchase Again" : "Purchase")</h6>
                <div>
                    <span>@Price.FormattedPrice</span>
                    <aside>one-time purchase</aside>
                </div>
            </button>
        }

        <button id="help-tab" class="product-tab@(ActiveTab == "Help" ? "active" : "")" @onclick="@(() => OnClickTab("Help"))">
            <h6>Need Help ?</h6>
        </button>
    </div>
</div>

@if (ActiveTab != null)
{
    <div class="left-sidebar">
        <header>
            @ActiveTab
            <button @onclick=@(() => OnClickTab(ActiveTab))>
                <XIcon />
            </button>
        </header>
        <div>
            @switch (ActiveTab)
            {
                case "Purchase":
                    <Sparc2.Catalog.ProductPurchase Product="ActiveProduct" />
                    ;
                    break;
                case "Download":
                    <Sparc2.Catalog.ProductKey />
                    break;
                case "Demo":
                case "Help":
                    break;
            }
        </div>
    </div>
}

@inject ISparcAura Aura
@code {
    [Parameter] public Product ActiveProduct { get; set; } = new Product();
    [Parameter] public GetProductResponse? Price { get; set; }
    [Parameter] public BlossomUser? User { get; set; }
    bool OwnsProduct => User?.HasProduct(ActiveProduct.Id) == true;
    bool HasPurchasedProduct => User?.Product(ActiveProduct.Id)?.OrderIds.Any() == true;
    string? ActiveTab = null;

    public async Task OnClickTab(string tab)
    {
        ActiveTab = (ActiveTab == tab ? null : tab);
        switch (tab)
        {
            case "Download":
                var totp = await Aura.GetSparcCode();
                if (totp != null)
                    Nav.NavigateTo($"{ActiveProduct.Url}?_auth=totp:{totp.Code}");
                break;
        }
    }
}