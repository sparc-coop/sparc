@using Sparc.Engine
@using Sparc.Engine.Aura
<div class="product-actions">
    <div class="tabs">
        @if (OwnsProduct)
        {
            <button id="download-tab" class="product-tab"><h6>Go to @ActiveProduct.Title &rarr;</h6></button>
        }
        else
        {
            <button id="demo-tab" class="product-tab" data-id=@ActiveProduct.Id><h6>Try It Out</h6></button>
        }
        @if (Price != null)
        {
            <button id="purchase-tab" class="product-tab" data-id=@ActiveProduct.Id>
                <h6>@(OwnsProduct ? "Purchase Again" : "Purchase")</h6>
                <div>
                    <span>@Price.FormattedPrice</span>
                    <aside>one-time purchase</aside>
                </div>
            </button>
        }
        <button id="help-tab" class="product-tab" data-id=@ActiveProduct.Id><h6>Need Help ?</h6></button>
    </div>
</div>

@inject ISparcAura Aura
@code {
    [Parameter] public Product ActiveProduct { get; set; } = new Product();
    [Parameter] public GetProductResponse? Price { get; set; }
    [Parameter] public BlossomUser? User { get; set; }
    [Parameter] public EventCallback<string> OnTabChanged { get; set; }
    bool OwnsProduct => User?.HasProduct(ActiveProduct.Id) == true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("initProductActions", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable("OnClickTab")]
    public async Task OnClickTab(string tab)
    {
        switch (tab)
        {
            case "help-tab":
                await OnTabChanged.InvokeAsync("Help");
                break;
            case "purchase-tab":
                await OnTabChanged.InvokeAsync("Purchase");
                break;
            case "demo-tab":
                await OnTabChanged.InvokeAsync("Demo");
                break;
            case "download-tab":
                var totp = await Aura.GetSparcCode();
                if (totp != null)
                    Nav.NavigateTo($"{ActiveProduct.Url}?_totp={totp.Code}");
                break;
        }
    }
}