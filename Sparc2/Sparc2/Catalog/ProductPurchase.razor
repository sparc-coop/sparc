@using Sparc.Blossom.Authentication
@using Sparc.Engine
@using Sparc.Engine.Aura
@using Sparc.Engine.Billing
@using System.Globalization

<div class="product-purchase">
    <form id="payment-form" @onsubmit="SubmitUserBilling" @onsubmit:preventDefault="true">
        <section class="license-section">
            <PurchaseLicenseType @bind-SelectedLicense="SelectedLicense" @bind-GiftEmail="GiftEmail" />
        </section>
        @if (CurrentUser != null && !CurrentUser.HasIdentity("Email"))
        {
            <section class="billing-section">
                <PurchaseBilling Order="Order" Product="Product" UserEmail="@Email" OnEmailVerified="HandleEmailVerified"></PurchaseBilling>
            </section>
        }
        <section class="payment-section">
            <h5>Payment Information</h5>
            <div class="form-container">
                <ProductPurchasePayment Order="Order" Product="Product"></ProductPurchasePayment>
            </div>
        </section>
        <button id="submit-button" type="submit" class="btn primary-btn" disabled="@(!CanPurchase)">
            Purchase
        </button>
    </form>
</div>

@inject ISparcAura Aura
@code {
    [Parameter] public Product? Product { get; set; }

    BlossomUser? CurrentUser;
    SparcOrder Order = new SparcOrder();

    string SelectedLicense = "personal";
    string GiftEmail = "";
    private bool isEmailVerified = false;
    private string? Email => CurrentUser?.Identity("Email");

    private bool CanPurchase => isEmailVerified;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await Aura.UserInfo();

        if (string.IsNullOrWhiteSpace(Order.ReceiptEmail) && !string.IsNullOrWhiteSpace(Email))
        {
            Order.ReceiptEmail = Email;
        }
    }

    private void HandleEmailVerified(bool verified)
    {
        isEmailVerified = verified;
        StateHasChanged();
    }

    public async Task SubmitUserBilling()
    {
        var result = await Js.InvokeAsync<PaymentResult>(
            "stripeIntegration.confirmPayment"
        );

        if (result.Succeeded)
        {
            Nav.NavigateTo(Nav.Uri, forceLoad: false);
        }
    }
    public class PaymentResult
    {
        public bool Succeeded { get; set; }
        public string? Message { get; set; }
        public string? Status { get; set; }
    }
}