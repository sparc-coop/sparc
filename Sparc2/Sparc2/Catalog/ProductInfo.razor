@using Markdig
@implements IDisposable

<div class="product-info @PageClass(PageType) @(showFullDescription ? "fullscreen" : "")">
    <div class="info-container">
        <header>
            <div>
                <h2 @onclick='() => Nav.NavigateTo($"/catalog/{ActiveProduct.Id}")'>@ActiveProduct.Title</h2>
                @if (Price != null)
                {
                    <div class="price">
                        <span>@Price.FormattedPrice</span>
                    </div>
                }
            </div>
            <div class="subheader product-tags">
                @foreach (var tag in ActiveProduct.Tags)
                {
                    var color = TagColor(tag.Type);
                    <div class="tag product-tag @color">@tag.Name</div>
                }
            </div>
        </header>

        @if (ActiveProduct.Description != null)
        {
            <section class="description">
                @((MarkupString)(Markdown.ToHtml(ActiveProduct.Description)))
            </section>
        }

        @if (ActiveProduct.Credits.Any())
        {
            <section class="credits">
                <h3><button @onclick=ToggleCredits>Credits <span class="@creditsClass">+</span></button></h3>
                <div class="@creditsClass">
                    @foreach (var credit in ActiveProduct.Credits)
                    {
                        <p>@credit.Name | @credit.Title</p>
                    }
                </div>
            </section>
        }
        @if (PageType == "Product")
        {
            <footer>
                <ProductActions ActiveProduct=ActiveProduct Price=Price OnTabChanged=ChangeTab />
            </footer>
        }
    </div>

    @* <div class="gradient-overlay mobile-only"></div> *@
    <button class="view-btn mobile-only" @onclick='() => Nav.NavigateTo($"/catalog/{ActiveProduct.Id}")'><ArrowLeftIcon /></button>
    <div class="show-more mobile-only">
        <button class="more-btn" @onclick='() => ToggleFullDescription(true)'>Show More</button>
    </div>
    <div class="show-less mobile-only">
        <button class="less-btn" @onclick='() => ToggleFullDescription(false)'>Show Less</button>
    </div>
</div>

@inject Sparc.Engine.SparcEvents Events
@code {
    [Parameter] public required Product ActiveProduct { get; set; }
    [Parameter] public string PageType { get; set; } = "Product";
    [Parameter] public EventCallback<string> OnTabChanged { get; set; }
    Sparc.Engine.GetProductResponse? Price;

    bool showCredits;
    string creditsClass = "";
    bool showFullDescription;

    protected override async Task OnParametersSetAsync()
    {
        await UpdatePrice();
        Events.CurrencyChanged += UpdatePrice;
    }

    async Task ChangeTab(string? tab)
    {
        if (OnTabChanged.HasDelegate)
            await OnTabChanged.InvokeAsync(tab);
    }

    async Task UpdatePrice(SparcCurrency? currency = null)
    {
        if (ActiveProduct.StripeProductId == null)
            Price = null;
        else
            Price = await Billing.GetProductAsync(ActiveProduct.StripeProductId, currency?.Id);
        
        StateHasChanged();
    }

    string PageClass(string page)
    {
        var pageClass = page switch
        {
            "Catalog" => "catalog-page",
            "Product" => "product-page",
            _ => ""
        };

        return pageClass;
    }

    string TagColor(string tag)
    {
        var color = tag switch
        {
            "development" => "purple",
            "category" => "orange",
            "gift" => "gradient",
            "archived" => "grey",
            "owned" => "blue",
            _ => "default"
        };

        return color;
    }

    void ToggleCredits()
    {
        showCredits = !showCredits;

        if (showCredits == true)
        {
            creditsClass = "rotate";
        }
        else
        {
            creditsClass = "rotateBack";
        }
    }

    void ToggleFullDescription(bool showMore)
    {
        if (showMore)
            showFullDescription = true;
        else
            showFullDescription = false;
    }

    public void Dispose()
    {
        Events.CurrencyChanged -= UpdatePrice;
    }
}