@using Markdig
@implements IDisposable

<div class="product-info @PageClass(PageType)">
    <div class="info-container">
        <header>
            <div>
                <h2 @onclick='() => Nav.NavigateTo($"/store/{ActiveProduct.Id}")'>
                    @ActiveProduct.Title
                    @if (ActiveProduct.Subtitle != null)
                    {
                        <aside>@ActiveProduct.Subtitle</aside>
                    }
                </h2>
                @if (Price != null)
                {
                    <div class="price">
                        <span>@Price.FormattedPrice</span>
                    </div>
                }
            </div>
            <div class="subheader product-tags">
                @foreach (var tag in ActiveProduct.Tags)
                {
                    var color = TagColor(tag.Type);
                    <div class="tag product-tag @color">@tag.Name</div>
                }
                @if (User?.HasProduct(ActiveProduct.Id) == true)
                {
                    <div class="tag product-tag @TagColor("owned")">
                        @(User.Product(ActiveProduct.Id)!.OrderIds.Any() ? "You Own This!" : "Free Trial In Progress")
                    </div>
                }
            </div>
        </header>

        @if (ActiveProduct.Images.Any())
        {
            <div class="mobile-only">
                <figure class="product-img span-1">
                    <img src="@ActiveProduct.Images.First()" alt="@ActiveProduct.Title" />
                </figure>
            </div>
        }

        @if (ActiveProduct.Description != null)
        {
            <section class="description">
                @((MarkupString)(Markdown.ToHtml(ActiveProduct.Description)))
            </section>
        }

        @if (ActiveProduct.Credits.Any())
        {
            <section class="credits">
                <h3><button @onclick=ToggleCredits>Credits <span class="@creditsClass">+</span></button></h3>
                <div class="@creditsClass">
                    @foreach (var credit in ActiveProduct.Credits)
                    {
                        <p>@credit.Name | @credit.Title</p>
                    }
                </div>
            </section>
        }
        @if (PageType == "Product")
        {
            <footer>
                <ProductActions ActiveProduct=ActiveProduct Price=Price User=User />
            </footer>
        }
    </div>
</div>

@inject Sparc.Engine.SparcEvents Events
@code {
    [Parameter] public required Product ActiveProduct { get; set; }
    [Parameter] public string PageType { get; set; } = "Product";
    [Parameter] public BlossomUser User { get; set; }
    Sparc.Engine.GetProductResponse? Price;

    bool showCredits = true;
    string creditsClass = "rotate";
    bool showFullDescription;

    protected override void OnInitialized()
    {
        Events.CurrencyChanged += UpdatePrice;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (User != null)
            await UpdatePrice();
    }

    async Task UpdatePrice(SparcCurrency? currency = null)
    {
        currency ??= User?.Avatar?.Currency;

        if (ActiveProduct.StripeProductId == null)
            Price = null;
        else
            Price = await Billing.GetProductAsync(ActiveProduct.StripeProductId, currency?.Id);

        StateHasChanged();
    }

    string PageClass(string page)
    {
        var pageClass = page switch
        {
            "Catalog" => "catalog-page",
            "Product" => "product-page",
            _ => ""
        };

        return pageClass;
    }

    string TagColor(string tag)
    {
        var color = tag switch
        {
            "development" => "purple",
            "category" => "orange",
            "gift" => "gradient",
            "archived" => "grey",
            "owned" => "blue",
            _ => "default"
        };

        return color;
    }

    void ToggleCredits()
    {
        showCredits = !showCredits;

        if (showCredits == true)
        {
            creditsClass = "rotate";
        }
        else
        {
            creditsClass = "rotateBack";
        }
    }

    void ToggleFullDescription(bool showMore)
    {
        if (showMore)
            showFullDescription = true;
        else
            showFullDescription = false;
    }

    public void Dispose()
    {
        Events.CurrencyChanged -= UpdatePrice;
    }
}