@if (CurrentStep == 0)
{
    <div>
        <h2>Be Part of Sparc</h2>
        <p>Aptent facilisi torquent tempor sapien iaculis ultrices nisi porta  lacus. Libero purus sapien nulla commodo fringilla, sed efficitur. At  rutrum facilisis elementum per neque magna quis tincidunt. Faucibus  dignissim scelerisque penatibus lacinia, lacus luctus.</p>
    </div>
    <EditForm Model="@Donation" OnValidSubmit="HandleValidSubmit">
        <div class="field-group">
            <label>Donation frequency</label>
            <div class="btn-group">
                <button type="button" class="@GetButtonClass(Donation.Frequency == "One time")" @onclick="@(() => SetFrequency("One time"))">
                    <CoinIcon /> <span>One time</span>
                </button>

                <button type="button" class="@GetButtonClass(Donation.Frequency == "Monthly")" @onclick="@(() => SetFrequency("Monthly"))">
                    <RefreshIcon /> <span>Monthly</span>
                </button>
            </div>
        </div>

        <div class="field-group">
            <label>Amount</label>
            <div class="amount-grid">
                @foreach (var amount in PredefinedAmounts)
                {
                    <button type="button" class="@GetButtonClass(SelectedAmount == amount)" @onclick="() => SetAmount(amount)">$@amount</button>
                }
                <div class="currency-input">
                    <CurrencyIcon />
                    <InputNumber @bind-Value="CustomAmount" placeholder="0" @onfocus="() => SetAmount(null)" @oninput="() => SetAmount(null)" />
                </div>
            </div>
        </div>
    </EditForm>
}
else if (CurrentStep == 1)
{
    <h2>Payment Method</h2>
    <div class="payment-form">
        <EditForm Model="@Donation" OnValidSubmit="HandleValidSubmit">
            <label>
                <span>Name <span class="required">*</span></span>
                <InputText placeholder="Name on the card" @bind-Value="Donation.Payment.CardHolderName" />
            </label>
            <label>
                <span>Card Number <span class="required">*</span></span>
                <InputText placeholder="Card number" @bind-Value="Donation.Payment.CardNumber" />
            </label>
            <div>
                <label>
                    <span>Expiry Date <span class="required">*</span></span>
                    <InputText placeholder="MM/YY" @bind-Value:format="MM/yy" @bind-Value="Donation.Payment.ExpiryDate" />
                </label>
                <label>
                    <span>CVV <span class="required">*</span></span>
                    <InputText placeholder="***" @bind-Value="Donation.Payment.CVV" />
                </label>
            </div>
            <label>
                <span>Email Address <span class="required">*</span></span>
                <InputText placeholder="Email" @bind-Value="Donation.Payment.EmailAdress" />
            </label>
            <label>
                <span>Billing Address Line 1 <span class="required">*</span></span>
                <InputText placeholder="Billing Address" @bind-Value="Donation.Payment.BillingAddress" />
            </label>
            <label>
                <span>Billing Address Line 2 <span class="required">*</span></span>
                <InputText placeholder="Billing Address" @bind-Value="Donation.Payment.BillingAddress" />
            </label>
        </EditForm>
    </div>
}

@code {
    [Parameter] public int CurrentStep { get; set; }
    [Parameter] public EventCallback OnNext { get; set; }
    [Parameter] public EventCallback OnBack { get; set; }

    private readonly int[] PredefinedAmounts = { 5, 25, 50, 60, 75, 100 };

    private UserDonation Donation = new UserDonation(0, string.Empty, new PaymentInfo(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty));

    private decimal? SelectedAmount { get; set; } = null;
    private decimal? CustomAmount
    {
        get => SelectedAmount == null ? Donation.Amount : null;
        set
        {
            if (value != null)
            {
                SetAmount(null);
            }
            Donation.Amount = value ?? 0;
            StateHasChanged();
        }
    }

    private void SetFrequency(string frequency)
    {
        Donation.Frequency = frequency;
    }

    private void SetAmount(decimal? amount)
    {
        SelectedAmount = amount;
        Donation.Amount = amount ?? 0;
        StateHasChanged();
    }

    private string GetButtonClass(bool isSelected)
    {
        return isSelected ? "selected" : "";
    }

    private async Task HandleValidSubmit()
    {
        if (CurrentStep == 0)
        {
            await OnNext.InvokeAsync();
        }
        else
        {
            // await Api.UserDonations.Create(Donation.Amount, Donation.Frequency, Donation.Payment);
        }
    }
}
