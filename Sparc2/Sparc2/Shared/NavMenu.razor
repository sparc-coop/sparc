@using Sparc.Blossom.Authentication

<nav id="nav" class="@(IsIdeasPage ? "other-nav" : "home-nav")">
    <div class="container">
        @if (IsIdeasPage)
        {
            <div class="left">
                <button @onclick='() => Navigate("/")'><ArrowLeftIcon /> <span>Exit</span></button>
            </div>
            <div class="center">
                <input type="text" placeholder="Search" class="input-text" />
            </div>
            <div class="right">
                <button class="tertiary-btn" @onclick="() => OpenAddCard(0)"><LightbulbIcon /> <span>Share Idea</span></button>
                <button class="tertiary-btn donate-btn" @onclick="() => OpenAddCard(1)"><DollarIcon />  <span>Donate</span></button>
            </div>
        }
        else
        {
            <div class="left" @onclick='() => Navigate("/")'>
                <SparcLogo TextOnly=true />
            </div>
            <div class="right">
                <button id="about-btn" class="secondary-btn" @onclick='() => Nav.NavigateTo("/about")'>About Us</button>
                <button id="catalog-btn" class="secondary-btn" @onclick='() => Nav.NavigateTo("/catalog")'>Catalog</button>
                <button id="ideas-btn" class="secondary-btn">Ideas</button>
                @* <Auth /> *@
                <div class="account-btn">
                    <UserProfile />
                    @if (CurrentUser is not null)
                    {
                        <div @onclick:stopPropagation @onkeypress:stopPropagation>                        
                            @if (IsEditingUsername)
                            {
                                <input type="text" @bind="Username"
                                       @ref="UsernameInput"
                                       @bind:event="oninput"
                                       @onblur="SaveUsername"
                                       @onkeypress="HandleKeyPress" />
                            }
                            else
                            {
                                <span @onclick="StartEditing">
                                    @CurrentUser.Username
                                </span>
                            }
                        </div>
                    }
                </div>
            </div>            
        }
    </div>
</nav>
<Auth />

@inject IJSRuntime Js

@if (ShowAddCard)
{
    <div class="modal-overlay" @onclick:stopPropagation>
        <AddCard OnClose="CloseAddCard" SelectedHeaderButton="@SelectedHeaderButton" />
    </div>
}

@code {
    private bool ShowAddCard = false;
    private bool IsIdeasPage => Nav.Uri.EndsWith("/ideas");
    private int SelectedHeaderButton = 0;
    BlossomUser? CurrentUser;
    private bool IsEditingUsername = false;
    private string Username = string.Empty;
    private ElementReference UsernameInput;

    protected override async Task OnInitializedAsync() => await GetUserInfo();

    private async Task GetUserInfo()
    {
        CurrentUser = await SparcEngine.UserInfo();
    }

    private void Navigate(string path)
    {
        Nav.NavigateTo(path);
    }

    private void OpenAddCard(int headerIndex)
    {
        SelectedHeaderButton = headerIndex;
        ShowAddCard = true;
    }

    private void CloseAddCard(bool shouldClose)
    {
        if (shouldClose)
            ShowAddCard = false;
    }

    private async void StartEditing()
    {
        if (CurrentUser?.Username is not null)
        {
            Username = CurrentUser.Username;
        }
        IsEditingUsername = true;
        await Js.InvokeVoidAsync("setEditingUsername", true);
        await UsernameInput.FocusAsync();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveUsername();
        }
    }

    private async Task SaveUsername()
    {
        var newUsername = Username?.Trim();

        IsEditingUsername = false;
        StateHasChanged();  

        if (!string.IsNullOrWhiteSpace(newUsername) && CurrentUser is not null)
        {
            CurrentUser.Username = newUsername;
            await SparcEngine.UpdateUser(new UpdateUserRequest { Username = CurrentUser.Username });
        }

        await Js.InvokeVoidAsync("setEditingUsername", false);
    }
}

