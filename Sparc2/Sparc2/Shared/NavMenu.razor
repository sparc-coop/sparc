@using Sparc.Blossom.Authentication
@using System.Security.Claims

<nav id="nav" class="@(IsIdeasPage ? "other-nav" : "home-nav") @(showMobileMenu ? "nav-mobile" : "")">
    <div class="container">
        @if (IsIdeasPage)
        {
            <div class="left">
                <a @onclick='() => Navigate("/")' class="button"><ArrowLeftIcon /> <span>Exit</span></a>
            </div>
            <div class="center">
                <input type="text" placeholder="Search" class="input-text" />
            </div>
            <div class="right">
                <a class="button tertiary-btn" @onclick="() => OpenAddCard(0)"><LightbulbIcon /> <span>Share Idea</span></a>
                <a class="button tertiary-btn donate-btn" @onclick="() => OpenAddCard(1)"><DollarIcon />  <span>Donate</span></a>
            </div>
        }
        else
        {
            <div class="left" @onclick='() => Navigate("/")'>
                <SparcLogo TextOnly=true />
            </div>
            <div class="right @(showMobileMenu ? "mobile-menu show" : "")">
                <div class="menu">
                    <div class="menu-pages">
                        <h5>Pages</h5>
                        <a id="about-btn" class="button secondary-btn" @onclick='() => Nav.NavigateTo("/about")'>About Us</a>
                        <a id="catalog-btn" class="button secondary-btn" @onclick='() => Nav.NavigateTo("/catalog")'>Catalog</a>
                        <a id="ideas-btn" class="button secondary-btn" @onclick='() => Nav.NavigateTo("/ideas")'>Ideas</a>
                        @* <Auth /> *@
                    </div>
                    <hr />
                    <div class="menu-profile">
                        <h5>Profile</h5>
                        <div class="account-btn">
                            Hi, @User.Identity?.Name.
                        </div>
                    </div>
                </div>
            </div>
            <div id="menu-toggle" class="menu-toggle">
                @if (!showMobileMenu)
                {
                    <button id="open-menu" @onclick=ToggleMobileMenu>
                        <SparcMenuIcon />
                    </button>
                } else
                {
                    <button id="close-menu" @onclick=ToggleMobileMenu>
                        <SparcCloseIcon />
                    </button>
                }
            </div>
        }
    </div>
</nav>
<Auth />

@inject IJSRuntime Js

@if (ShowAddCard)
{
    <div class="modal-overlay" @onclick:stopPropagation>
        <AddCard OnClose="CloseAddCard" SelectedHeaderButton="@SelectedHeaderButton" />
    </div>
}

@inject ClaimsPrincipal User
@code { 
    private bool ShowAddCard = false;
    private bool IsIdeasPage => Nav.Uri.EndsWith("/ideas");
    private int SelectedHeaderButton = 0;
    private bool IsEditingUsername = false;
    private string Username = string.Empty;
    private ElementReference UsernameInput;
    bool showMobileMenu;

    private void Navigate(string path)
    {
        Nav.NavigateTo(path);
    }

    private void OpenAddCard(int headerIndex)
    {
        SelectedHeaderButton = headerIndex;
        ShowAddCard = true;
    }

    private void CloseAddCard(bool shouldClose)
    {
        if (shouldClose)
            ShowAddCard = false;
    }

    private async void StartEditing()
    {
        if (User.Identity?.Name is not null)
            Username = User.Identity.Name;

        IsEditingUsername = true;
        await Js.InvokeVoidAsync("setEditingUsername", true);
        await UsernameInput.FocusAsync();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveUsername();
        }
    }

    private async Task SaveUsername()
    {
        var newUsername = Username?.Trim();

        IsEditingUsername = false;
        StateHasChanged();  

        if (!string.IsNullOrWhiteSpace(newUsername) && User is not null)
        {
            // User.Identity.Name = newUsername;
            // await SparcEngine.UpdateUser(new UpdateUserRequest { Username = CurrentUser.Avatar.Username });
        }

        await Js.InvokeVoidAsync("setEditingUsername", false);
    }

    async Task ToggleMobileMenu()
    {
        Console.WriteLine($"ToggleMobileMenu: {showMobileMenu}");
        showMobileMenu = !showMobileMenu;

        if (showMobileMenu)
        {
            await Js.InvokeVoidAsync("disableBodyScrolling", true);
        } else
        {
            await Js.InvokeVoidAsync("disableBodyScrolling", false);
        }

        StateHasChanged();
    }
}