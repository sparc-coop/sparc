@using System.Net.Http.Json
@using System.Text.Json
@using Sparc.Blossom.Authentication
@inject HttpClient Http
@inject IJSRuntime JS

<div class="blossom-authenticator @(IsAnonymous ? "loggedout" : "loggedin")">
    <button aria-label="Toggle auth menu" class="auth-toggle" @onclick="ToggleMenu">
        <UserIcon LoggedIn="!IsAnonymous" />
    </button>

    @if (IsOpen)
    {
        <section class="auth-menu">
            <button class="close-btn" @onclick="ToggleMenu"><Close /></button>
            @if (IsAnonymous)
            {
                if (CurrentUser != null)
                {
                    <article>
                        <figure>
                            <UserIcon LoggedIn="false" />
                            <figcaption>@CurrentUser.Id</figcaption>
                        </figure>
                        <nav>
                            <ul>
                                <li>
                                    <button @onclick="SignupWithPasskey">
                                        <Passkey /> Sign Up with Passkey
                                    </button>
                                </li>
                                <li>
                                    <button @onclick="LoginWithPasskey">
                                        <Passkey /> Login with Passkey
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </article>
                }
            }
            else
            {
                if (CurrentUser != null)
                {
                    <article>
                        <figure>
                            <UserIcon LoggedIn="true" />
                            <figcaption>@CurrentUser.Id</figcaption>
                        </figure>
                        <nav>
                            <ul>
                                <li>
                                    <button @onclick="ChangeUsername">
                                        <Profile /> Change Username
                                    </button>
                                </li>
                                <li>
                                    <button @onclick="AddBackupContact">
                                        <Shield /> Add Backup Email/Phone
                                    </button>
                                </li>
                                <li>
                                    <button @onclick="SignOut">
                                        <SignOut /> Sign Out
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </article>
                }

            }

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert alert-info mt-3">@Message</div>
            }

            <hr />
            @*             <footer>
                <LanguageSelector />
            </footer> *@
        </section>
    }
</div>


@code {
    BlossomUser? CurrentUser;
    bool IsOpen = true;
    bool HasError;
    bool IsAnonymous = true;
    string Message;
    const string ApiKey = "blossomcloud:public:3a16c78de07641e5b82f270d278ace2b";
    string Email;
    string Token;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initBlossomCloudAuthenticator", ApiKey);
            await FetchUserInfo();
        }
    }

    void ToggleMenu() => IsOpen = !IsOpen;

    async Task SignupWithPasskey()
    {
        Message = null;
        CurrentUser = null;

        // 1) kick off registration challenge
        var start = await Http.PostAsync("auth/login", null);
        if (!start.IsSuccessStatusCode) { Message = $"⚠️ Signup start failed: {start.StatusCode}"; return; }

        var doc = await start.Content.ReadFromJsonAsync<JsonDocument>();
        if (!doc.RootElement.TryGetProperty("token", out var tok)) { Message = "⚠️ No registration token."; return; }
        var challenge = tok.GetString();

        // 2) browser WebAuthn
        var passkey = await JS.InvokeAsync<string>("signUpWithPasskey", challenge);
        if (string.IsNullOrWhiteSpace(passkey)) { Message = "⚠️ Passkey signup aborted."; return; }

        // 3) complete on server
        var finish = await Http.PostAsync($"auth/login?emailOrToken={Uri.EscapeDataString(passkey)}", null);
        if (finish.IsSuccessStatusCode)
        {
            CurrentUser = await finish.Content.ReadFromJsonAsync<BlossomUser>();
            Message = "✅ Signed up & logged in!";

            if (CurrentUser != null && CurrentUser.ExternalId != null)
            {
                IsAnonymous = false;
                StateHasChanged();
            }
        }
        else
        {
            var err = await finish.Content.ReadAsStringAsync();
            Message = $"❌ Signup failed: {finish.StatusCode} – {err}";
        }
    }

    async Task LoginWithPasskey()
    {
        Message = null;
        CurrentUser = null;

        // 1) browser passkey signin
        var token = await JS.InvokeAsync<string>("signInWithPasskey", null);
        if (string.IsNullOrEmpty(token)) { Message = "⚠️ No passkey token."; return; }

        // 2) validate with server
        var resp = await Http.PostAsync($"auth/login?emailOrToken={Uri.EscapeDataString(token)}", null);
        if (resp.IsSuccessStatusCode)
        {
            CurrentUser = await resp.Content.ReadFromJsonAsync<BlossomUser>();
            Message = "✅ Logged in!";

            if (CurrentUser != null && CurrentUser.ExternalId != null)
            {
                IsAnonymous = false;
                StateHasChanged();
            }
        }
        else
        {
            Message = $"❌ Login failed: {resp.StatusCode}";
        }


    }

    async Task FetchUserInfo()
    {
        var resp = await Http.GetAsync("auth/userinfo");
        if (resp.IsSuccessStatusCode)
        {
            CurrentUser = await resp.Content.ReadFromJsonAsync<BlossomUser>();
            Message = null;
            StateHasChanged();
        }
    }

    async Task ChangeUsername()
    {
        // TODO: open a prompt/modal and POST to your profile endpoint
    }

    async Task AddBackupContact()
    {
        // TODO: open backup-email/phone flow
    }

    async Task SignOut()
    {
        await Http.PostAsync("auth/logout", null);
        CurrentUser = null;
        Message = "ℹ️ Signed out";
    }
}
