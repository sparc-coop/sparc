<div class="modal add-card @(IdeaToEdit != null ? "edit-mode" : "")">
    <div class="progress-bar">
        <div class="progress" style="width: @(StepProgress + "%");"></div>
    </div>

    <section>
        @if (SelectedHeaderButton == 0)
        {
            <AddIdea CurrentStep="@CurrentStep"
                     EditContext="@editContext"
                     Idea="@Idea"
                     UploadedFiles="@UploadedFiles"
                     OnFilesChanged="@OnFilesChanged"
                     OnUploadStatusChanged="@OnUploadStatusChanged" />
        }
        else
        {
            <AddDonation CurrentStep="@CurrentStep" />
        }
    </section>

    <footer>
        <button class="secondary-btn" @onclick="OnBackOrCancel"><span>@BackOrCancelLabel</span></button>
        <button class="primary-btn" @onclick="OnNextOrSubmit" disabled="@IsUploading"><span>@NextOrSubmitLabel</span></button>
    </footer>
</div>

<div class="modal-overlay"></div>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public int SelectedHeaderButton { get; set; }
    [Parameter] public Idea? IdeaToEdit { get; set; }
    [Parameter] public bool StartOnFiles { get; set; }

    private int CurrentStep;
    private int StepProgress => CurrentStep == 0 ? 50 : 100;
    private bool IsUploading;

    private Sparc2.Ideas.ProjectIdea Idea = new("", "", "", new());
    private EditContext editContext = null!;
    private List<Sparc2.Files.FileUpload> UploadedFiles = new();

    protected override void OnInitialized()
    {
        if (IdeaToEdit != null)
        {
            Idea = new Sparc2.Ideas.ProjectIdea(
                IdeaToEdit.Title,
                IdeaToEdit.Author,
                IdeaToEdit.Description,
                IdeaToEdit.FileUrls.ToList()
            );
            CurrentStep = StartOnFiles ? 1 : 0;
        }

        editContext = new EditContext(Idea);
    }

    private string BackOrCancelLabel => CurrentStep == 0 ? "Cancel" : "Back";
    private string NextOrSubmitLabel => CurrentStep == 0 ? "Next" : (SelectedHeaderButton == 0 ? "Post" : "Donate");

    private async Task OnNextOrSubmit()
    {
        if (!editContext.Validate())
        {
            editContext.NotifyValidationStateChanged();
            return;
        }

        if (CurrentStep == 0)
        {
            CurrentStep = 1;
        }
        else
        {
            if (SelectedHeaderButton == 0)
                await SubmitIdea();
            else
                await SubmitDonation();
        }
    }

    private async Task OnBackOrCancel()
    {
        if (CurrentStep == 0)
        {
            await OnClose.InvokeAsync(true);
        }
        else
        {
            CurrentStep = 0;
        }
    }

    private void OnUploadStatusChanged(bool uploading)
    {
        IsUploading = uploading;
        InvokeAsync(StateHasChanged);
    }

    private async Task SubmitIdea()
    {
        if (IdeaToEdit != null)
        {
            await IdeaToEdit.Update(Idea.Title, Idea.Author, Idea.Description, Idea.FileUrls);
            await OnClose.InvokeAsync(true);
        }
        else
        {
            var createdIdea = await Api.ProjectIdeas.Create(Idea.Title, Idea.Author, Idea.Description, Idea.FileUrls);
            await OnClose.InvokeAsync(true);
            await IdeaService.NotifyIdeaPostedAsync(createdIdea.Id);
        }
    }

    private Task SubmitDonation()
    {
        return Task.CompletedTask;
    }

    private void OnFilesChanged(List<Sparc2.Files.FileUpload> files)
    {
        UploadedFiles = files;
    }
}