<div class="modal add-card">
    <div class="card-nav">
        <button class="secondary-btn @GetButtonClass(0)" @onclick="() => SelectHeaderButton(0)">
            <LightbulbIcon /> <span>Share</span>
        </button>

        <button class="secondary-btn @GetButtonClass(1)" @onclick="() => SelectHeaderButton(1)">
            <DollarIcon /> <span>Donate</span>
        </button>
    </div>

    <div class="progress-bar">
        <div class="progress" style="width: @(StepProgress + "%");"></div>
    </div>

    <section>
        @if (SelectedHeaderButton == 0)
        {
                <AddIdea CurrentStep="@CurrentStep"
                         EditContext="@editContext"
                         Idea="@Idea"
                         UploadedFiles="@UploadedFiles"
                         OnFilesChanged="@OnFilesChanged" />
        }
        else
        {
                <AddDonation CurrentStep="@CurrentStep" EditContext="@editContext" />
        }
    </section>

    <footer>
        <button class="secondary-btn" @onclick="OnBackOrCancel"><span>@BackOrCancelLabel</span></button>
        <button class="primary-btn" @onclick="OnNextOrSubmit"><span>@NextOrSubmitLabel</span></button>
    </footer>
</div>

@inject Sparc2.Ideas.IdeaService IdeaService

@code {
    private int CurrentStep;
    private int SelectedHeaderButton; // 0 = Share, 1 = Donate
    private int StepProgress => CurrentStep == 0 ? 50 : 100;

    private Sparc2.Ideas.ProjectIdea Idea = new("", "", "", new());
    private EditContext editContext;

    private List<Sparc2.Files.FileUpload> UploadedFiles = new();

    [Parameter] public EventCallback<bool> OnClose { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(Idea);
    }

    private string GetButtonClass(int index) => index == SelectedHeaderButton ? "active" : "";

    private string BackOrCancelLabel => CurrentStep == 0 ? "Cancel" : "Back";
    private string NextOrSubmitLabel => CurrentStep == 0 ? "Next" : (SelectedHeaderButton == 0 ? "Post" : "Donate");

    private void SelectHeaderButton(int index)
    {
        SelectedHeaderButton = index;
        CurrentStep = 0;
    }

    private async Task OnNextOrSubmit()
    {
        if (!editContext.Validate())
        {
            editContext.NotifyValidationStateChanged();
            return;
        }

        if (CurrentStep == 0)
        {
            CurrentStep = 1;
        }
        else
        {
            if (SelectedHeaderButton == 0)
                await SubmitIdea();
            else
                await SubmitDonation();
        }
    }

    private async Task OnBackOrCancel()
    {
        if (CurrentStep == 0)
        {
            await OnClose.InvokeAsync(true);
        }
        else
        {
            CurrentStep = 0;
        }
    }

    private async Task SubmitIdea()
    {
        await Api.ProjectIdeas.Create(Idea.Title, Idea.Author, Idea.Description, Idea.FileUrls);
        IdeaService.AddIdea(Idea);
        await OnClose.InvokeAsync(true);
    }

    private Task SubmitDonation()
    {
        return Task.CompletedTask;
    }

    private void OnFilesChanged(List<Sparc2.Files.FileUpload> files)
    {
        UploadedFiles = files;
    }
}