<div class="modal add-card">
    <div class="progress-bar">
        <div class="progress" style="width: @(StepProgress + "%");"></div>
    </div>

    <section style="overflow: scroll">
        @switch (SelectedHeaderButton)
        {
            case 0:
                <AddIdea 
                CurrentStep="@CurrentStep"
                EditContext="@editContext"
                Idea="@Idea"
                UploadedFiles="@UploadedFiles"
                OnFilesChanged="@OnFilesChanged"
                OnUploadStatusChanged="@OnUploadStatusChanged" />
                break;
            case 1:
                <AddDonation CurrentStep="@CurrentStep" OnComplete="@HandleComplete" />
                break;
            case 2:
                <Sparc2.Pages.AddProduct CurrentStep="@CurrentStep" ProductId="prod_SW5yY8O8KprzFu" OnComplete="@HandleComplete" />
                break;
        }
    </section>

    <footer>
        <button class="secondary-btn" @onclick="OnBackOrCancel"><span>@BackOrCancelLabel</span></button>
        <button class="primary-btn" @onclick="OnNextOrSubmit" disabled="@IsUploading"><span>@NextOrSubmitLabel</span></button>
    </footer>
</div>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public int SelectedHeaderButton { get; set; }

    private int CurrentStep;
    private int StepProgress => CurrentStep == 0 ? 50 : 100;
    private bool IsUploading;

    private Sparc2.Ideas.ProjectIdea Idea = new("", "", "", new());
    private EditContext editContext;
    private List<Sparc2.Files.FileUpload> UploadedFiles = new();

    protected override void OnInitialized()
    {
        editContext = new EditContext(Idea);
    }

    private string BackOrCancelLabel => CurrentStep == 0 ? "Cancel" : CurrentStep == 1 ? "Back" : "";
    private string NextOrSubmitLabel => CurrentStep == 0 ? "Next" : SelectedHeaderButton == 0 ? "Post" : SelectedHeaderButton == 1 ? "Donate" : "Pay";

    private async Task OnNextOrSubmit()
    {
        if (!editContext.Validate())
        {
            editContext.NotifyValidationStateChanged();
            return;
        }

        if (CurrentStep == 0)
        {
            CurrentStep = 1;
        }
        else
        {
            if (SelectedHeaderButton == 0)
                await SubmitIdea();
            else if (SelectedHeaderButton == 1)
                await SubmitDonation();
            else
                await SubmitProduct();
        }
    }

    private async Task OnBackOrCancel()
    {
        if (CurrentStep == 0)
        {
            await OnClose.InvokeAsync(true);
        }
        else
        {
            CurrentStep = 0;
        }
    }

    private async Task HandleComplete()
    {
        await OnClose.InvokeAsync(true);
    }

    private void OnUploadStatusChanged(bool uploading)
    {
        IsUploading = uploading;
    }

    private async Task SubmitIdea()
    {
        await Api.ProjectIdeas.Create(Idea.Title, Idea.Author, Idea.Description, Idea.FileUrls);
        IdeaService.AddIdea();
        await OnClose.InvokeAsync(true);
    }

    private Task SubmitDonation()
    {
        return Task.CompletedTask;
    }

    private Task SubmitProduct()
    {
        return Task.CompletedTask;
    }

    private void OnFilesChanged(List<Sparc2.Files.FileUpload> files)
    {
        UploadedFiles = files;
    }
}