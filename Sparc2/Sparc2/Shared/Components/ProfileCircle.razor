@using Sparc.Blossom.Authentication
@inject IBlossomCloud BlossomCloud

<div class="user-profile-container" @onmouseover="() => IsHovered = true" @onmouseout="() => IsHovered = false">
    <div class="profile-picture-wrapper @(IsOnline ? "online" : "")">
        <img src="@ProfileImageUrl" alt="User Profile" />
    </div>

    @if (IsHovered)
    {
        <button title="Email" class="top" @onclick="@(() => OnShowModal("Email"))">
            <img src="images/email.png" alt="Email Icon" />
        </button>
        <button title="Phone Number" class="bottom" @onclick="@(() => OnShowModal("Phone"))">
            <img src="images/phone.png" alt="Phone Icon" />
        </button>
        <button title="Language" class="top-left" @onclick="@(() => OnShowModal("Language"))">
            <img src="images/language.png" alt="Language Icon" />
        </button>
    }
</div>

@if (ShowModal)
{
    <div class="modal-overlay">
        <div class="modal @(InfoType == "Language" ? "language-modal" : "")">
            @if (InfoType == "Email")
            {
                <header>
                    <h3>Please enter your email:</h3>
                </header>
                <div>
                    <InputText @bind-Value="Email" />
                    @* <label>
                        <InputCheckbox @bind-Value="VerifyEmail" />
                        <span>Verify this email</span>
                    </label> *@
                </div>
            }
            else if (InfoType == "Phone")
            {
                <header>
                    <h3>Please enter your phone number:</h3>
                </header>
                <div>
                    <InputText @bind-Value="PhoneNumber" />
                    @* <label>
                        <InputCheckbox @bind-Value="VerifyPhone" />
                        <span>Verify this phone number</span>
                    </label> *@
                </div>
            }
            else if (InfoType == "Language")
            {
                <header>
                    <h3>Language:</h3>
                </header>
                <div>
                    <LanguageSelector CurrentUser="CurrentUser"
                                      SelectedLanguageId="@SelectedLanguageId"
                                      SelectedLanguageIdChanged="OnLanguageChanged" />
                </div>
            }
            <footer>
                <button class="secondary-btn" @onclick="OnCancel">Cancel</button>
                <button class="primary-btn" @onclick="OnInfoEntered">Save</button>
            </footer>
        </div>
    </div>
}

@if (ShowVerificationModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <header>
                <h3>Enter the verification code sent to @(CurrentVerificationDestination)</h3>
            </header>
            <div>
                <InputText @bind-Value="VerificationCode" />
                @if (!string.IsNullOrEmpty(VerificationError))
                {
                    <p class="error-text">@VerificationError</p>
                }
            </div>
            <footer>
                <button class="secondary-btn" @onclick="OnCancelVerification">Cancel</button>
                <button class="primary-btn" @onclick="VerifyCode">Verify</button>
            </footer>
        </div>
    </div>
}


@code {
    [Parameter] public string ProfileImageUrl { get; set; } = "images/puppy.jpg";
    BlossomUser? CurrentUser;
    private string? SelectedLanguageId { get; set; }

    private bool IsHovered = false;
    private bool ShowModal = false;
    private string InfoType = string.Empty;

    private string Email { get; set; }
    private string PhoneNumber { get; set; }

    private bool VerifyEmail = false;
    private bool VerifyPhone = false;

    private string VerificationCode { get; set; } = "";
    private bool ShowVerificationModal = false;
    private string CurrentVerificationDestination = "";
    private string VerificationError = "";

    public bool IsOnline => CurrentUser is not null == true;

    protected override async Task OnInitializedAsync() => await GetUserInfo();

    private async Task GetUserInfo()
    {
        CurrentUser = await BlossomCloud.UserInfo();
        Email = CurrentUser?.Email ?? "";
        PhoneNumber = CurrentUser?.PhoneNumber ?? "";
    }

    private void OnShowModal(string type)
    {
        InfoType = type;

        if (CurrentUser is not null)
        {
            if (type == "Email")
            {
                Email = CurrentUser.Email ?? "";
                VerifyEmail = false;
            }
            else if (type == "Phone")
            {
                PhoneNumber = CurrentUser.PhoneNumber ?? "";
                VerifyPhone = false;
            }
        }

        ShowModal = true;
    }

    private void OnCancel()
    {
        ShowModal = false;
        InfoType = string.Empty;
        VerificationError = "";
    }

    private async Task OnInfoEntered()
    {
        var request = new UpdateUserRequest();

        if (InfoType == "Email")
        {
            request = request with { Email = Email, RequireEmailVerification = VerifyEmail };
            CurrentVerificationDestination = Email;
        }
        else if (InfoType == "Phone")
        {
            request = request with { PhoneNumber = PhoneNumber, RequirePhoneVerification = VerifyPhone };
            CurrentVerificationDestination = PhoneNumber;
        }
        else if (InfoType == "Language")
        {
            Console.WriteLine($"SelectedLanguageId: {SelectedLanguageId}");

            if (SelectedLanguageId is not null)
            {
                var languages = await BlossomCloud.GetLanguages();
                var language = languages.FirstOrDefault(l => l.Id == SelectedLanguageId);

                if (language is not null)
                {
                    await BlossomCloud.AddUserLanguage(language);
                }
            }
        }

        await BlossomCloud.UpdateUser(request);

        var shouldShowVerification = (InfoType == "Email" && VerifyEmail) || (InfoType == "Phone" && VerifyPhone);

        ShowModal = false;
        InfoType = string.Empty;

        if (shouldShowVerification)
        {
            VerificationCode = "";
            VerificationError = "";
            ShowVerificationModal = true;
        }

        await GetUserInfo();
        StateHasChanged();
    }


    private async Task VerifyCode()
    {
        var success = await BlossomCloud.VerifyCode(new VerificationRequest(CurrentVerificationDestination, VerificationCode));

        if (success)
        {
            ShowVerificationModal = false;
            VerificationError = "";
            await GetUserInfo();
            StateHasChanged();
        }
        else
        {
            VerificationError = "Invalid verification code. Please try again.";
        }
    }

    private void OnCancelVerification()
    {
        ShowVerificationModal = false;
        VerificationCode = "";
        VerificationError = "";
    }

    private void OnLanguageChanged(string? languageId)
    {
        Console.WriteLine($"Selected language: {languageId}");
        SelectedLanguageId = languageId;
    }
}

